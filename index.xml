<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>临水轩志</title>
    <link>https://yumminhuang.github.io/</link>
    <description>Recent content on 临水轩志</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>2018 ~ Yaming Huang</copyright>
    <lastBuildDate>Mon, 08 Jan 2018 21:51:56 +0800</lastBuildDate>
    
	<atom:link href="https://yumminhuang.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Twelve-Factor App</title>
      <link>https://yumminhuang.github.io/link/12factor/</link>
      <pubDate>Mon, 08 Jan 2018 21:51:56 +0800</pubDate>
      
      <guid>https://yumminhuang.github.io/link/12factor/</guid>
      <description>12-Factor 列出了 12 条软件交付原则，涵盖了从架构设计、开发，和部署的全过程，是基于现代云计算时代进行软件开发总结出来的最佳实践。它集合了敏捷开发、持续</description>
    </item>
    
    <item>
      <title>程序员使用的笔记软件</title>
      <link>https://yumminhuang.github.io/post/quiver_snippetslab/</link>
      <pubDate>Sun, 31 Dec 2017 17:25:51 +0800</pubDate>
      
      <guid>https://yumminhuang.github.io/post/quiver_snippetslab/</guid>
      <description>&lt;p&gt;我一直在寻找一款工作上适合程序员使用的笔记软件。工作的时候，经常需要记录一些代码片段和笔记。这类笔记大部分都不成体系，记录的都是一些工作上的要点和代码片段。有的时候只是临时保存一小段代码。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>清理 Docker</title>
      <link>https://yumminhuang.github.io/post/dockerclenup/</link>
      <pubDate>Fri, 13 Oct 2017 22:26:29 +0800</pubDate>
      
      <guid>https://yumminhuang.github.io/post/dockerclenup/</guid>
      <description>&lt;p&gt;在线上环境运行的 Docker 的时候，部署之后往往没有清理旧版本的镜像和关闭的容器。如此一来，长时间运行 Docker，尤其是频繁地更新镜像、启动容器，会消耗大量的磁盘空间。&lt;/p&gt;

&lt;p&gt;本文汇总几条用来清理 Docker 的命令。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>搭建分布式 Gerrit 集群</title>
      <link>https://yumminhuang.github.io/post/distributedgerrit/</link>
      <pubDate>Sun, 10 Sep 2017 11:31:51 +0800</pubDate>
      
      <guid>https://yumminhuang.github.io/post/distributedgerrit/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.gerritcodereview.com&#34;&gt;Gerrit&lt;/a&gt; 是由 Google为了管理 Android 项目而开发的，一款免费、开源的代码审查软件。Gerrit 使用 Git 作为底层版本控制系统，提供了代码审查、权限管理等功能。&lt;/p&gt;

&lt;p&gt;本文将会简单介绍如何搭建分布式 Gerrit 集群，即搭建由一个可以读写的 Gerrit Master 和若干个只读的 Gerrit Slave 组成的 Gerrit 集群。Gerrit Slave 可以实时同步 Gerrit Master 的数据，保证代码的一致性。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>为什么我不用微信</title>
      <link>https://yumminhuang.github.io/link/whynotwechat/</link>
      <pubDate>Thu, 06 Jul 2017 20:48:02 +0800</pubDate>
      
      <guid>https://yumminhuang.github.io/link/whynotwechat/</guid>
      <description>我目前在生活中还不能完全摆脱微信，虽然我仍然在不断地努力尝试中。除了「为什么我不用微信」里提到的诸多原因之外，每当： 一些同事在微信发来一长串</description>
    </item>
    
    <item>
      <title>Build Gerrit Plugins</title>
      <link>https://yumminhuang.github.io/note/buildgerritplugin/</link>
      <pubDate>Sat, 03 Dec 2016 14:21:57 +0800</pubDate>
      
      <guid>https://yumminhuang.github.io/note/buildgerritplugin/</guid>
      <description>Gerrit plugins can be built with both Buck and Maven.
NOTE: Developing Gerrit plugins requires installing JDK first.
Build by Maven If plugin contains pom.xml file, it can be built with Maven.
 Install Maven, see Maven Doc about Installing Apache Maven Check out plugin source code  git clone https://gerrit.googlesource.com/plugins/reviewers  Build with Maven  mvn clean package Maven will automatically download all dependencies and build source code. You will be able to find jar file in $WORKSPACE/target directory.</description>
    </item>
    
    <item>
      <title>Customize Gerrit Homepage</title>
      <link>https://yumminhuang.github.io/note/gerrithomepage/</link>
      <pubDate>Sat, 03 Dec 2016 14:20:37 +0800</pubDate>
      
      <guid>https://yumminhuang.github.io/note/gerrithomepage/</guid>
      <description>Customized Homepage To customize Gerrit homepage, we added the following files:
 $site_path/etc/GerritSiteHeader.html HTML is inserted below the menu bar, but above any page content. This is a good location for an organizational logo. $site_path/etc/GerritSiteFooter.html HTML is inserted at the bottom of the page, below all other content. Display links to FAQ, user guides, etc. $site_path/etc/GerritSite.css The customized CSS rules are inlined into the top of the HTML page. $site_path/static/logo.</description>
    </item>
    
    <item>
      <title>Find Gerrit Outdated Projects</title>
      <link>https://yumminhuang.github.io/note/findgerritoutdatedprojects/</link>
      <pubDate>Sat, 03 Dec 2016 14:09:23 +0800</pubDate>
      
      <guid>https://yumminhuang.github.io/note/findgerritoutdatedprojects/</guid>
      <description>Recently, I had a job to clean up our Gerrit server. First of all, I have to find projects which we can deprecate and remove them.
Here is the solution how I found outdated Gerrit Projects.
Gerrit Administrator can use gerrit gsql command to access Gerrit backend database and query outdated projects. The below SQL can find projects whose lastest changes were updated 180 days ago.
 The results could be the candidates of deprecating projects.</description>
    </item>
    
    <item>
      <title>自动构建 Github Pages 博客</title>
      <link>https://yumminhuang.github.io/post/autobuildblog/</link>
      <pubDate>Sat, 12 Nov 2016 12:31:51 +0800</pubDate>
      
      <guid>https://yumminhuang.github.io/post/autobuildblog/</guid>
      <description>&lt;p&gt;之前曾经写过了一篇 &lt;a href=&#34;https://yumminhuang.github.io/post/AutoBuildResume/&#34;&gt;使用 Travis CI 和 Docker 自动构建 LaTeX 简历&lt;/a&gt;，介绍了使用 Travis CI 和 Docker 自动构建和发布 LaTeX 简历的方法。&lt;/p&gt;

&lt;p&gt;以前每次写了新文章之后，都需要在笔记本上运行一下 Hugo 再将生成的网页上传到 Github。虽然使用脚本也可以做到一键发布，但总觉得不够流畅。昨天，我又使用了同样的方法，将基于 Github Pages 的博客也实现了自动构建和发布。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Travis CI 和 Docker 自动构建 LaTeX 简历</title>
      <link>https://yumminhuang.github.io/post/autobuildresume/</link>
      <pubDate>Fri, 08 Apr 2016 15:17:48 -0400</pubDate>
      
      <guid>https://yumminhuang.github.io/post/autobuildresume/</guid>
      <description>&lt;p&gt;又快到了求职季，最近一段时间总是频繁更新的简历。之前，我的简历更新流程是先修改简历，使用 MacTeX 编译，再把 PDF 版的简历同步到几个网盘备份。过程倒也不算繁琐。但再做过几个月的运维开放之后，我对自动化有着近乎偏执的热情。这几天经过不断的尝试和摸索，在 Travis-CI 上运行了十几个 Build 之后，终于使用 Docker 实现了一个便捷的自动化发布 LaTeX 简历的方法。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Zootopia 观后感</title>
      <link>https://yumminhuang.github.io/zhpost/zootopia/</link>
      <pubDate>Mon, 07 Mar 2016 16:18:47 -0500</pubDate>
      
      <guid>https://yumminhuang.github.io/zhpost/zootopia/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;迪士尼，包括皮克斯，非常擅长将现实世界中的美国生活方式和美式流行文化投射到动画中的虚拟世界来赢得观众的共鸣；再利用各种细节、彩蛋博取观众的会心一笑；最后来一个欢乐的大结局把清教徒式的传统价值观传递给观众。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在网上被刷了几天屏之后，我今天去电影院看了电影《疯狂动物城（Zootopia）》。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>持续集成交付部署</title>
      <link>https://yumminhuang.github.io/post/ci/</link>
      <pubDate>Sat, 05 Mar 2016 17:29:12 -0500</pubDate>
      
      <guid>https://yumminhuang.github.io/post/ci/</guid>
      <description>&lt;p&gt;最近看了一篇文章 &lt;a href=&#34;http://www.mindtheproduct.com/2016/02/what-the-hell-are-ci-cd-and-devops-a-cheatsheet-for-the-rest-of-us/&#34;&gt;&lt;em&gt;The Product Managers’ Guide to Continuous Delivery and DevOps&lt;/em&gt;&lt;/a&gt;。
文中对「持续集成（ &lt;em&gt;Continuous Integration&lt;/em&gt; ）」、「持续交付（ &lt;em&gt;Continuous Delivery&lt;/em&gt; ）」和「持续部署（ &lt;em&gt;Continuous Deployment&lt;/em&gt; ）」这三个概念有很详细的解释。这里借用文中的插图，说一下我对这三个概念的理解。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git 工作流</title>
      <link>https://yumminhuang.github.io/post/gitworkingflow/</link>
      <pubDate>Sat, 13 Feb 2016 16:36:21 -0500</pubDate>
      
      <guid>https://yumminhuang.github.io/post/gitworkingflow/</guid>
      <description>&lt;p&gt;Git 可能是每个开发者最常用的工具之一。Git 让开发团队更加方便地进行版本控制和多人协作。但是如果开发团队没有约定如何使用 Git 工作，很可能会导致工作变得一团糟。其中最大的问题是同时存在太多的开发中的分支，每个分支都包含了部分修改。最终开放团队很难弄清楚哪一个分支应该继续开发，或者把它发布成产品。&lt;/p&gt;

&lt;p&gt;正如编程过程中变量命名需要一套标准的命名规则（&lt;a href=&#34;https://en.wikipedia.org/wiki/Naming_convention_(programming)&#34;&gt;Naming convention&lt;/a&gt;）一样，开发团队在使用 Git 的时候，也需要一套标准的工作流，从而确保高效的开发、测试和部署。&lt;/p&gt;

&lt;p&gt;关于 Git 的工作流，业界已经有了很多讨论。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>不靠谱微信公众号的几个特征</title>
      <link>https://yumminhuang.github.io/zhpost/unreliablearticleonwexin/</link>
      <pubDate>Fri, 22 Jan 2016 14:45:31 -0500</pubDate>
      
      <guid>https://yumminhuang.github.io/zhpost/unreliablearticleonwexin/</guid>
      <description>&lt;p&gt;我不经常用微信，也只关注了为数不多的几个公众号。但时常能看到一些不靠谱微信公众号发的低质量文章。&lt;/p&gt;

&lt;p&gt;判断一个公众号的内容是否优质很难，但是不靠谱公众号基本上都有一些共同点。&lt;/p&gt;

&lt;p&gt;今天我爸给我发了一篇公众号的文章「上当了！到了才知道 美国其实是这样的…」 问我总结的对不对。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Two Coding Problems</title>
      <link>https://yumminhuang.github.io/note/codingproblems/</link>
      <pubDate>Fri, 18 Dec 2015 16:53:33 -0500</pubDate>
      
      <guid>https://yumminhuang.github.io/note/codingproblems/</guid>
      <description>Two coding problems I encountered in a recent interview.
Problem 1  Problem: Print a binary tree row-by-row, from top to bottom.
Example:
 Input: Binary tree 3 / \ 1 4 \ \ 2 5 Output: 3, 1, 4, 2, 5 Solution
class Node(object): def __init__(self, value, left=None, right=None): self.value = value self.left = left self.right = right def traverse(rootnode): # The list to save all visited nodes visited = list() # BFS thislevel = [rootnode] while thislevel: nextlevel = list() for n in thislevel: visited.</description>
    </item>
    
    <item>
      <title>如何选择开源项目的证书</title>
      <link>https://yumminhuang.github.io/post/chooseaopensourcelicense/</link>
      <pubDate>Fri, 18 Dec 2015 10:27:50 -0500</pubDate>
      
      <guid>https://yumminhuang.github.io/post/chooseaopensourcelicense/</guid>
      <description>&lt;p&gt;世界上的开源许可证有很多。除了常见的 &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache&lt;/a&gt;，&lt;a href=&#34;http://en.wikipedia.org/wiki/BSD_licenses&#34;&gt;BSD&lt;/a&gt;， &lt;a href=&#34;https://en.wikipedia.org/wiki/MIT_License&#34;&gt;MIT&lt;/a&gt; 等之外，还有一些奇特的证书，比如 &lt;a href=&#34;http://www.wtfpl.net/&#34;&gt;WTFPL (Do What the Fuck You Want to Public License)&lt;/a&gt;。Github 还专门做了一个&lt;a href=&#34;http://choosealicense.com/&#34;&gt;网站&lt;/a&gt; 介绍了常见的开源证书。&lt;/p&gt;

&lt;p&gt;然而开源证书虽多，却很少有人会仔细研究证书上的法律条文，搞清楚它们的区别。我最近看了 Github 的网站，又看了一些网上的文章，稍稍研究了几个常用证书的区别，以及如何为开源项目选择证书。故撰此文以供参考。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Site Reliability Engineer Interview</title>
      <link>https://yumminhuang.github.io/note/sreinterview/</link>
      <pubDate>Thu, 03 Dec 2015 23:35:42 -0500</pubDate>
      
      <guid>https://yumminhuang.github.io/note/sreinterview/</guid>
      <description>&lt;p&gt;Recently, I had a phone interview for a position of Site Reliability Engineer. They asked me four questions in 60 minutes. I was asked to writing code on &lt;a href=&#34;http://collabedit.com/&#34;&gt;collabedit&lt;/a&gt;
Because Site Reliability Team of that company uses Python and I also prefer to Python, so all solutions are written in Python.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Calculating Quantiles</title>
      <link>https://yumminhuang.github.io/note/calculatingquantiles/</link>
      <pubDate>Thu, 03 Dec 2015 21:12:18 -0500</pubDate>
      
      <guid>https://yumminhuang.github.io/note/calculatingquantiles/</guid>
      <description>&lt;p&gt;This problem is from my recent online coding test. I didn&amp;rsquo;t solve it in the limited time cause I used a wrong way. When I realize that, I don&amp;rsquo;t have enough time to fix it. I feel regretful for failing the test.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Resume</title>
      <link>https://yumminhuang.github.io/resume/resume/</link>
      <pubDate>Fri, 13 Nov 2015 10:19:57 -0500</pubDate>
      
      <guid>https://yumminhuang.github.io/resume/resume/</guid>
      <description>PROFESSIONAL EXPERIENCE LeEco Zhixin, Beijing, China, Jul. 2016 — Jul. 2017
DevOps Engineer
 Managed the distributed Gerrit cluster, which hosts about 1TB codebase, for providing the code host service to over 1500 developers around the world Established a real-time data analysis platform that collecting data from Jenkins build and Gerrit cluster to provide data analysis and decision support Built a continuous delivery pipeline for PHP project based on Jenkinsfile Developed an Ansible playbook for Gerrit and ELK cluster, implementing automated deployment and configuration  BitSight, Cambridge, MA, Jan.</description>
    </item>
    
    <item>
      <title>简历</title>
      <link>https://yumminhuang.github.io/resume/resume_zh/</link>
      <pubDate>Fri, 13 Nov 2015 10:19:57 -0500</pubDate>
      
      <guid>https://yumminhuang.github.io/resume/resume_zh/</guid>
      <description>职业经历 乐视致新，北京，2016 年 7 月 —— 2017 年 7 月 DevOps 运维开发工程师 管理分布式 Gerrit 集群，托管近 1TB 代码库，为全球约 1500 名研发人员提供代码托管服务； 搭</description>
    </item>
    
    <item>
      <title>将博客由 Pelican 迁移到 Hugo</title>
      <link>https://yumminhuang.github.io/post/migratetohugo/</link>
      <pubDate>Fri, 13 Nov 2015 09:38:53 -0500</pubDate>
      
      <guid>https://yumminhuang.github.io/post/migratetohugo/</guid>
      <description>&lt;p&gt;前两天花了一些时间研究了一下 &lt;a href=&#34;https://gohugo.io/overview/introduction/&#34;&gt;Hugo 的文档&lt;/a&gt;，并且把博客从 &lt;a href=&#34;http://blog.getpelican.com/&#34;&gt;Pelican&lt;/a&gt; 迁移到 Hugo。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://yumminhuang.github.io/page/license/</link>
      <pubDate>Tue, 10 Nov 2015 22:40:22 -0500</pubDate>
      
      <guid>https://yumminhuang.github.io/page/license/</guid>
      <description>This website is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License, except where indicated otherwise. 除非特别说明，本网站采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。</description>
    </item>
    
    <item>
      <title>关于／About</title>
      <link>https://yumminhuang.github.io/page/about/</link>
      <pubDate>Tue, 10 Nov 2015 22:29:59 -0500</pubDate>
      
      <guid>https://yumminhuang.github.io/page/about/</guid>
      <description>欢迎访问我的博客。 Thanks for visiting! I am a master student in computer science at Northeastern University. This site will aggregate my scattered online presence and hopefully provide a place for recording what I learn. 自我介绍 我目前是东北大学计算机与信息科学学院的在读硕士研究</description>
    </item>
    
    <item>
      <title>Ruby 中的猴子补丁</title>
      <link>https://yumminhuang.github.io/post/monkeypatchinruby/</link>
      <pubDate>Sat, 27 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://yumminhuang.github.io/post/monkeypatchinruby/</guid>
      <description>&lt;p&gt;之前一段时间，在实习工作当中，使用到了一种有些独特的编程技巧；而且该技巧又有一个奇特的名称：「猴子补丁」。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Travis CI</title>
      <link>https://yumminhuang.github.io/post/travisci/</link>
      <pubDate>Sat, 20 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://yumminhuang.github.io/post/travisci/</guid>
      <description>&lt;p&gt;本文将主要介绍如何使用 &lt;a href=&#34;https://travis-ci.org&#34;&gt;Travis CI&lt;/a&gt; 托管 Github 上的开源项目，从而实现自动化测试、部署。同时，还将介绍使用 &lt;a href=&#34;https://coveralls.io/&#34;&gt;Coveralls&lt;/a&gt; 来监测测试覆盖率。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jenkins 简介</title>
      <link>https://yumminhuang.github.io/post/jenkins/</link>
      <pubDate>Tue, 02 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://yumminhuang.github.io/post/jenkins/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;https://yumminhuang.github.io/post/PythonTestCoveragewithJenkins/&#34;&gt;之前的一篇文章中&lt;/a&gt;，曾经提及过 Jenkins。在本次实习中，Jenkins 是我每天都要使用的工具。在频繁的使用过程当中：通过实际工作感受了「持续集成」的概念（关于持续集成的概念，此处按下不表，待有时间的时候再详细总结。）；逐渐熟悉了 Jenkins 的使用，并且体会到其带来的方便。因此，希望总结一下 Jenkins 的使用。&lt;/p&gt;

&lt;p&gt;然而 Jenkins 不通过具体的案例难以体会其方便之处，网上相关使用说明之类的文章又颇多，所以本文仅谈个人使用中的体会，并非学习Jenkins使用的教程。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>One Trick for Debugging Python</title>
      <link>https://yumminhuang.github.io/note/pythondebugtrick/</link>
      <pubDate>Mon, 11 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://yumminhuang.github.io/note/pythondebugtrick/</guid>
      <description>I just learned one trick for debugging Python script from my colleague. It&amp;rsquo;s not such magical maybe most of Pythonistee have already used it everyday), but I think it is very useful to debug Python script.
I only need to add single line at the position I want to break.
import code; code.interact(local=locals()) After that, run Python script as usual. Python Interpreter will stop at your break point and launch a REPL (Read–eval–print loop) console.</description>
    </item>
    
    <item>
      <title>基于 Jenkins 的 Python 代码集成整合</title>
      <link>https://yumminhuang.github.io/post/pythontestcoveragewithjenkins/</link>
      <pubDate>Fri, 17 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://yumminhuang.github.io/post/pythontestcoveragewithjenkins/</guid>
      <description>&lt;p&gt;实习中最近做了一个多月的项目是将代码测试覆盖率整合到公司持续整合（Continuous Integration）的流程当中。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Fabric 进行远程操作</title>
      <link>https://yumminhuang.github.io/post/remotecommandsviafabric/</link>
      <pubDate>Thu, 16 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://yumminhuang.github.io/post/remotecommandsviafabric/</guid>
      <description>&lt;h2 id=&#34;fabric-简介&#34;&gt;Fabric 简介&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.fabfile.org&#34;&gt;Fabric&lt;/a&gt; 是一个实现远程操作和部署的 Python 模块。Fabric 主要用来作为 SSH 的替代，实现一些简单的应用部署和系统管理。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Graphite 和 Grafana 简介</title>
      <link>https://yumminhuang.github.io/post/graphiteandgrafana/</link>
      <pubDate>Wed, 08 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://yumminhuang.github.io/post/graphiteandgrafana/</guid>
      <description>&lt;h2 id=&#34;graphite&#34;&gt;Graphite&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://graphite.wikidot.com/start&#34;&gt;Graphite&lt;/a&gt; 是一款开源的监控绘图工具。&lt;/p&gt;

&lt;p&gt;Graphite 可以实时收集、存储、显示时间序列类型的数据（time series data）。它主要有三个部分构成：
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sensu 简介</title>
      <link>https://yumminhuang.github.io/post/sensu/</link>
      <pubDate>Sat, 04 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://yumminhuang.github.io/post/sensu/</guid>
      <description>&lt;h2 id=&#34;sensu-简介&#34;&gt;Sensu 简介&lt;/h2&gt;

&lt;p&gt;Sensu 是一款开源的监控框架。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>3 个月运维工作之总结</title>
      <link>https://yumminhuang.github.io/post/threemonthesofoperationwork/</link>
      <pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://yumminhuang.github.io/post/threemonthesofoperationwork/</guid>
      <description>&lt;p&gt;自从 1 月 5 日开始实习至今，在 Operation Team 已经工作了三个月。我觉得有必要对工作进行一下总结。既是我对三个月来所学新知识的归纳，也是对运维工作的一些思考。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>i3 窗口管理器简介</title>
      <link>https://yumminhuang.github.io/post/i3windowmanager/</link>
      <pubDate>Sun, 29 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://yumminhuang.github.io/post/i3windowmanager/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;http://kernelpanic.fm&#34;&gt;内核恐慌&lt;/a&gt;第九期&lt;a href=&#34;http://ipn.li/kernelpanic/9/&#34;&gt;「程序员的理想工作环境」&lt;/a&gt;中，主持人 Rio 和吴涛谈及了 Tiling Window Manager，并且介绍了 &lt;a href=&#34;http://awesome.naquadah.org/&#34;&gt;Awesome 窗口管理器&lt;/a&gt;和 i3 窗口管理器。节目中两位主持人的对描述 Tiling Window Manager 恰好符合我的需求，并且实习所用的笔记本操作系统刚好是 Ubuntu，所以听完节目后，我也试着在办公电脑上安装了 Awesome。然而体验并不愉快，我为此在微博上&lt;a href=&#34;http://www.weibo.com/2622511625/C1N9FgPr5&#34;&gt;吐槽&lt;/a&gt;。之后在 Rio 的建议下，我安装了 i3，果然非常好用。这里，结合我两个月的使用体验，简单地介绍一下 i3 窗口管理器，并且推荐大家使用。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 VPS 搭建 VPN 服务器</title>
      <link>https://yumminhuang.github.io/post/buildvpnonvps/</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://yumminhuang.github.io/post/buildvpnonvps/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;从来就没有什么救世主&lt;/p&gt;

&lt;p&gt;也不靠神仙皇帝&lt;/p&gt;

&lt;p&gt;要创造人类的幸福&lt;/p&gt;

&lt;p&gt;全靠我们自己&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Yelp Interview Problem</title>
      <link>https://yumminhuang.github.io/note/yelpinterviewproblem/</link>
      <pubDate>Tue, 18 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yumminhuang.github.io/note/yelpinterviewproblem/</guid>
      <description>&lt;p&gt;Today, I had a skype interview with Yelp.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 AWS AutoScaling Group 中替换 Instance</title>
      <link>https://yumminhuang.github.io/post/replaceinstancesinautoscalinggroup/</link>
      <pubDate>Sat, 02 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yumminhuang.github.io/post/replaceinstancesinautoscalinggroup/</guid>
      <description>&lt;p&gt;这两周，我被分配的任务是实现 &lt;a href=&#34;http://aws.amazon.com/&#34;&gt;AWS&lt;/a&gt; 的 &lt;a href=&#34;http://aws.amazon.com/autoscaling/&#34;&gt;Auto Scaling&lt;/a&gt;功能。多亏有了 &lt;a href=&#34;https://github.com/boto/boto&#34;&gt;Boto&lt;/a&gt;， 很快就实现了创建 Auto Scaling Group 和添加 Scaling Policy。但是有一个问题却花费了一些时间才顺利解决。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to remove all pyc files from a project?</title>
      <link>https://yumminhuang.github.io/note/removepyc/</link>
      <pubDate>Thu, 31 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yumminhuang.github.io/note/removepyc/</guid>
      <description>&lt;p&gt;I am a paranoid guy. I like to delete all &amp;ldquo;useless&amp;rdquo; files. Today, I want to clean up my project repository. There are lots of &lt;code&gt;.pyc&lt;/code&gt; files. And I found this command, which is very convenient to batch delete files in a directory.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Execute a Command in the Background on Remote Server using SSH</title>
      <link>https://yumminhuang.github.io/note/linux-ssh-background-command/</link>
      <pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yumminhuang.github.io/note/linux-ssh-background-command/</guid>
      <description>&lt;p&gt;In a project, I have to deploy a simple server program on several remote servers. So I wrote a shell script to deploy and run the program using &lt;code&gt;scp&lt;/code&gt; and &lt;code&gt;ssh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since there are several remote servers, I have to run the server program in the background on all remote machines.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Objective-C 语法总结</title>
      <link>https://yumminhuang.github.io/post/objective-creference/</link>
      <pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yumminhuang.github.io/post/objective-creference/</guid>
      <description>&lt;p&gt;最近在学习 Objective-C。产生学习 Objective-C 的想法已经很久了，但是以前每次看到 Objective-C 代码就会觉得语法非常奇怪，于是学习的动力就受到的打击。恰逢放假，可以平心静气地学习 Objective-C。&lt;/p&gt;

&lt;p&gt;在看过了 Objective-C 的基本语法之后，明白了为什么之前会觉得 Objective-C 的语法奇怪。绝大部分的面向对象的程序语言，包括 C++、Java、Python 等在调用方法的格式都是 &lt;code&gt;object.method(argument1, argument2...)&lt;/code&gt;。然而 Objective-C 的格式却是 &lt;code&gt;[object method: argument1 andArg: argument2...]&lt;/code&gt;。所以长期使用 C++, Java 的程序员在第一次看到 Objective-C 代码时，对这些语法肯定有一些不适应。但是适应这些语法并仔细研究之后感觉 Objective-C 的语法也有它的优点。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>访沙坪公园红卫兵墓园记</title>
      <link>https://yumminhuang.github.io/zhpost/shapingbacemetery/</link>
      <pubDate>Tue, 06 Nov 2012 16:33:27 +0800</pubDate>
      
      <guid>https://yumminhuang.github.io/zhpost/shapingbacemetery/</guid>
      <description>&lt;p&gt;2012年11月2日，我去重庆拜访同学，住在重庆大学附近。由于重庆大学临近沙坪公园，之前又在&lt;a href=&#34;http://news.sina.com.cn/c/sd/2010-02-26/095519745175.shtml&#34;&gt;南方周末&lt;/a&gt;上看到那里有全国唯一保存完整的文革武斗死者墓地，于是第二天早上吃完早饭后就步行前往沙坪公园。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>