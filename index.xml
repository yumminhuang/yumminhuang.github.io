<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>临水轩志</title>
    <link>http://yumminhuang.github.io/</link>
    <description>Recent content on 临水轩志</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 22 Jan 2016 14:45:31 -0500</lastBuildDate>
    <atom:link href="http://yumminhuang.github.io/index.xml" rel="self" type="application/rss+xml" />
    
      
    
      
    
      
        
          <item>
            <title>如何选择开源项目的证书</title>
            <link>http://yumminhuang.github.io/blog/2015/12/18/%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%AF%81%E4%B9%A6/</link>
            <pubDate>Fri, 18 Dec 2015 10:27:50 -0500</pubDate>
            
            <guid>http://yumminhuang.github.io/blog/2015/12/18/%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%AF%81%E4%B9%A6/</guid>
            <description>&lt;p&gt;世界上的开源许可证有很多。除了常见的 &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache&lt;/a&gt;，&lt;a href=&#34;http://en.wikipedia.org/wiki/BSD_licenses&#34;&gt;BSD&lt;/a&gt;， &lt;a href=&#34;https://en.wikipedia.org/wiki/MIT_License&#34;&gt;MIT&lt;/a&gt; 等之外，还有一些奇特的证书，比如 &lt;a href=&#34;http://www.wtfpl.net/&#34;&gt;WTFPL (Do What the Fuck You Want to Public License)&lt;/a&gt;。Github 还专门做了一个&lt;a href=&#34;http://choosealicense.com/&#34;&gt;网站&lt;/a&gt; 介绍了常见的开源证书。&lt;/p&gt;

&lt;p&gt;然而开源证书虽多，却很少有人会仔细研究证书上的法律条文，搞清楚它们的区别。我最近看了 Github 的网站，又看了一些网上的文章，稍稍研究了几个常用证书的区别，以及如何为开源项目选择证书。故撰此文以供参考。&lt;/p&gt;

&lt;p&gt;如果开源的内容不是代码，可以选择&lt;a href=&#34;http://creativecommons.org/&#34;&gt;知识共享许可协议&lt;/a&gt;。针对是否需要署名使用，是否可以商用等问题，知识共享许可协议有许多不同的版本，可以访问&lt;a href=&#34;http://creativecommons.org/choose/&#34;&gt;链接&lt;/a&gt;来选择一个合适的知识共享许可协议。&lt;/p&gt;

&lt;p&gt;关于开源的代码，可以依次回答以下的问题来确定开源证书。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;是否允许他人闭源使用你的代码？

&lt;ul&gt;
&lt;li&gt;否：&lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;GPL&lt;/a&gt; (The GNU General Public License)&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:79a41204317e0bfdc567861d342a8b18:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:79a41204317e0bfdc567861d342a8b18:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;是：如果他人修改了你的代码，是否需要了解修改？

&lt;ul&gt;
&lt;li&gt;是：&lt;a href=&#34;https://www.eclipse.org/legal/epl-v10.html&#34;&gt;EPL&lt;/a&gt; (Eclipse Public License)&lt;/li&gt;
&lt;li&gt;否：是否打算为代码注册专利？

&lt;ul&gt;
&lt;li&gt;是：Apache License&lt;/li&gt;
&lt;li&gt;否：他人发布时是否需要显式地附带你的证书？

&lt;ul&gt;
&lt;li&gt;是：BSD License&lt;/li&gt;
&lt;li&gt;否：MIT License&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我没有研究各个开源证书的条文，以上内容也只是我的个人理解，难免有错误之处。所以，为一个正式的项目选择开源证书之前，最好还是仔细确认一遍。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:79a41204317e0bfdc567861d342a8b18:1&#34;&gt;GPL &lt;a href=&#34;https://opensource.org/licenses/gpl-license&#34;&gt;不同的版本之间也有区别&lt;/a&gt;，其中细微的差别对我来说实在难以理解。总之，GPL 是一个 &lt;a href=&#34;http://www.gnu.org/licenses/copyleft.html&#34;&gt;copyleft&lt;/a&gt; 的协议。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:79a41204317e0bfdc567861d342a8b18:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
          </item>
        
      
    
      
    
      
    
      
    
      
    
      
        
          <item>
            <title>将博客由 Pelican 迁移到 Hugo</title>
            <link>http://yumminhuang.github.io/blog/2015/11/13/%E5%B0%86%E5%8D%9A%E5%AE%A2%E7%94%B1-pelican-%E8%BF%81%E7%A7%BB%E5%88%B0-hugo/</link>
            <pubDate>Fri, 13 Nov 2015 09:38:53 -0500</pubDate>
            
            <guid>http://yumminhuang.github.io/blog/2015/11/13/%E5%B0%86%E5%8D%9A%E5%AE%A2%E7%94%B1-pelican-%E8%BF%81%E7%A7%BB%E5%88%B0-hugo/</guid>
            <description>&lt;p&gt;前两天花了一些时间研究了一下 &lt;a href=&#34;https://gohugo.io/overview/introduction/&#34;&gt;Hugo 的文档&lt;/a&gt;，并且把博客从 &lt;a href=&#34;http://blog.getpelican.com/&#34;&gt;Pelican&lt;/a&gt; 迁移到 Hugo。&lt;/p&gt;

&lt;p&gt;Pelican 是一个优秀的静态博客生成器。当初选用 Pelican 的主要是因为它是用 Python 开发的，而我又对 Python 比较熟悉。而且 Pelican 有很多由第三方开发者制作的插件提供了更多的功能。但是长期使用的过程中还是有一些小小的麻烦。当初，我想给博客里的中文文章添加&lt;a href=&#34;https://css.hanzi.co/&#34;&gt;「汉字标准格式」&lt;/a&gt; 这个框架，需要向模版里添加一段引入 CSS 和 JS 代码。但是 Pelican 的模版不易更改，我需要为了修改一两行 HTML 文件 Fork 之前的模版，方法既不优雅，维护成本又很高。另外，Pelican 的模版似乎是全局性的，所有的页面都使用相同的模版。&lt;/p&gt;

&lt;p&gt;后来，无意之间发现 Hugo 在配置和文件结构上和 Pelican 有很大的不同，大大地提高了可配置性，可以解决上述的两个问题。此外，第一次看到  &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo 官网&lt;/a&gt;的首页的时候，看上去非常漂亮，令人印象深刻。&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;hugo new site SITE_DIR&lt;/code&gt; 新建一个 Hugo 之后，生成以下路径：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── archetypes/
├── config.toml
├── content/
├── data/
├── layouts/
└── static/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;config.toml&lt;/code&gt; 用来存放设置。&lt;code&gt;content/&lt;/code&gt; 里存放的是文章，&lt;code&gt;data/&lt;/code&gt; 用来存放一些数据。 &lt;code&gt;static/&lt;/code&gt; 里是需要引入的 CSS 或图片之类的文件。如果需要添加现场的主题模版，可以添加到 &lt;code&gt;themes/&lt;/code&gt; 里并在&lt;code&gt;config.toml&lt;/code&gt; 里设置。这些内容和 Pelican、Jekyll 一样，有的也可以望文生义，猜到大致的作用。&lt;/p&gt;

&lt;p&gt;加下来着重介绍的是 &lt;code&gt;layouts/&lt;/code&gt;，这里定义了博客的模版，是自定义 Hugo 最重要的部分。和 Pelican 有很大不同的地方是，Hugo 可以自定义文章的类型（ Type ）。不同的类型可以使用不同的模版。比如，除了第三方主题提供的文章类型，我还想为中文文章新建一个类型 &lt;code&gt;zhpost&lt;/code&gt;。只需要在 &lt;code&gt;layouts/&lt;/code&gt; 下新建一个 &lt;code&gt;zhpost/&lt;/code&gt;。接着，我可以设置中文文章的样式，只需新建一个 &lt;code&gt;single.html&lt;/code&gt; 就可以了。我也因此可以在&lt;code&gt;layouts/zhpost/single.html&lt;/code&gt; 里引入「汉字标准格式」的 CSS 和 JS。另外，对于第三方主题的模版不满意的话还可以按照相同的路径重写一个。Hugo 会优先读取根目录下 &lt;code&gt;layouts/&lt;/code&gt; 里的设置。具体来说，&lt;code&gt;layouts/post/single.html&lt;/code&gt; 可以覆盖 &lt;code&gt;themes/THEME/layouts/post/single.html&lt;/code&gt;。这样我就可以很容易的替换不满意的模版了。&lt;/p&gt;

&lt;p&gt;Hugo 的可定制性非常高，从 404 页面，到文章列表的页面都可以修改，而且可以做到不同类型的文章使用不一样的样式。具体的配置需要参考&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;第三方的主题&lt;/a&gt;的设置和 Hugo 的文档。&lt;/p&gt;

&lt;p&gt;值得一提的是，Go 的模版语言可读性很高，几乎不需要花额外的时间学习。我对照着别人开发的主题照葫芦画瓢就完成了模版的定义和修改。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;archetypes/&lt;/code&gt;，用来存放定义的「原型」。原型的作用是自动添加文字的元数据。比如，我想每次创建 &lt;code&gt;post&lt;/code&gt; 类文章的时候都自动添加元数据，只需要在 &lt;code&gt;archetypes/&lt;/code&gt; 里添加一个 &lt;code&gt;post.md&lt;/code&gt;，并加入以下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
title = &amp;quot;my new post&amp;quot;
date = &amp;quot;2015-01-12T19:20:04-07:00&amp;quot;
tags = [&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;]
categories = [&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;]
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样每次运行 &lt;code&gt;hugo new post/ARTICLE.md&lt;/code&gt; 的时候都可以自动添加上面的元数据。&lt;/p&gt;

&lt;p&gt;Hugo 另外的一个优点是生成博客的速度非常快，生成一个网页的速度可以达到毫秒级别。如果博客的内容很多，Hugo 要比 Pelican、Jekyll 等由动态语言写成的博客生成器有很大的优势。&lt;/p&gt;

&lt;p&gt;当然，Hugo 也有不足。比如，Hugo 默认是不支持代码高亮的，需要额外设置。此外，在 Pelican 里，可以通过 &lt;a href=&#34;https://github.com/yuex/cjk-auto-spacing&#34;&gt;cjk-auto-spacing&lt;/a&gt; 插件来自动在英文单词和汉字之间插入空格，这对于有大量中英文混排的技术笔记来说非常方便。但是，目前我还没有找到 Hugo 有类似的解决方法，暂时只能在写文章的时候手工加入空格。&lt;/p&gt;

&lt;p&gt;刚开始使用 Hugo，有一些诸如 Taxonomies，Section 之类的功能还没有仔细研究。这篇文章也是草草完成，不慎严谨，俟后完善。&lt;/p&gt;
</description>
          </item>
        
      
    
      
    
      
    
      
        
          <item>
            <title>Ruby 中的猴子补丁</title>
            <link>http://yumminhuang.github.io/blog/2015/06/27/ruby-%E4%B8%AD%E7%9A%84%E7%8C%B4%E5%AD%90%E8%A1%A5%E4%B8%81/</link>
            <pubDate>Sat, 27 Jun 2015 00:00:00 +0000</pubDate>
            
            <guid>http://yumminhuang.github.io/blog/2015/06/27/ruby-%E4%B8%AD%E7%9A%84%E7%8C%B4%E5%AD%90%E8%A1%A5%E4%B8%81/</guid>
            <description>

&lt;p&gt;之前一段时间，在实习工作当中，使用到了一种有些独特的编程技巧；而且该技巧又有一个奇特的名称：「猴子补丁」。&lt;/p&gt;

&lt;h2 id=&#34;猴子补丁:aca85750c766d78d41bd1c15f9f6ff31&#34;&gt;猴子补丁&lt;/h2&gt;

&lt;p&gt;猴子补丁（&lt;a href=&#34;https://en.wikipedia.org/wiki/Monkey_patch&#34;&gt;Monkey Patch&lt;/a&gt;）是一种特殊的编程技巧。Monkey patch 可以用来在运行时动态地修改（扩展）类或模块。我们可以通过添加 Monkey Patch 来修改不满足自己需求的第三方库，也可以添加 Monkey Patch 零时修改代码中的错误。&lt;/p&gt;

&lt;h3 id=&#34;词源:aca85750c766d78d41bd1c15f9f6ff31&#34;&gt;词源&lt;/h3&gt;

&lt;p&gt;Monkey patch 最早被称作 Guerrilla patch，形容这种补丁像游击队员一样狡猾。后来因为发音相似，被称为 Gorilla patch。因为大猩猩不够可爱，后改称为 Monkey patch。&lt;/p&gt;

&lt;h3 id=&#34;使用场景:aca85750c766d78d41bd1c15f9f6ff31&#34;&gt;使用场景&lt;/h3&gt;

&lt;p&gt;以我的理解，Monkey patch 有两种使用场景：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;紧急的安全性补丁，即 Hotfix；&lt;/li&gt;
&lt;li&gt;修改或扩展库中的属性和方法。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;在-ruby-中使用-monkey-patch:aca85750c766d78d41bd1c15f9f6ff31&#34;&gt;在 Ruby 中使用 Monkey Patch&lt;/h2&gt;

&lt;p&gt;我当时遇到的场景是这样的：&lt;/p&gt;

&lt;p&gt;我司使用第三方库 &lt;a href=&#34;http://fog.io/&#34;&gt;fog&lt;/a&gt; 进行 EC2 的操作。创建实例等很多命令都需要设置实例类型这个参数。在 fog 里，EC2 的所有类型都定义在 &lt;code&gt;fog/aws/models/compute/flavors.rb&lt;/code&gt; 的 &lt;code&gt;FLAVORS&lt;/code&gt; 数组里。如果设置的类型不在 &lt;code&gt;FLAVORS&lt;/code&gt; 数组里，fog 都会视作是无效的参数而报错。&lt;/p&gt;

&lt;p&gt;后来，亚马逊发布了新的实例类型 &lt;code&gt;D2&lt;/code&gt;。虽然 Ruby 的第三方社区非常活跃，但是 fog 的开发社区还是没有及时添加 D2 到 &lt;code&gt;flavors.rb&lt;/code&gt; 里；而我司的工作又迫切需要使用 D2 类型的实例。&lt;/p&gt;

&lt;p&gt;背景交待完毕，接下来看看有什么样的解决方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;方法一&lt;/strong&gt;：我们可以向 fog 提交一个 Pull Request 来添加新类型。&lt;/p&gt;

&lt;p&gt;但是这个方法行不通。我们使用的 &lt;a href=&#34;https://github.com/chef/knife-ec2&#34;&gt;knife-ec2&lt;/a&gt; 对 fog 的版本依赖必须是 &lt;code&gt;1.25.*&lt;/code&gt;，但是 fog 已经更新到了 &lt;code&gt;1.31.0&lt;/code&gt;，而且 fog 从 &lt;code&gt;1.27.0&lt;/code&gt; 开始结构上有很大的变化。显然，我们不可能再等 knife-ec2 升级支持新版本的 fog，所以我们提交 Pull Request 更新 fog 不能解决问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;方法二&lt;/strong&gt;：手动更新旧版 fog
既然不能使用最新版的 fog，我们可以手动编辑 &lt;code&gt;1.25&lt;/code&gt; 版的 fog，再打包成 Gem 使用。这个方法比前一个方法更容易操作，但是带来的问题时不易于维护。为了一个极小的改动，把自己的代码加入到第三方库中总是让人觉得不够「干净」。&lt;/p&gt;

&lt;p&gt;最后，在同事的指点下，我采用了第三种方法，即 &lt;strong&gt;Monkey Patch&lt;/strong&gt;。我在我司的 Ruby 项目里添加了一个文件 &lt;code&gt;lib/PROJECT_NAME/monkey_patches/flavors.rb&lt;/code&gt;，接着在文件中添加以下代码来修改 &lt;code&gt;fog/aws/models/compute/flavors&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;fog/aws/models/compute/flavors&#39;

class Object

  def redef_without_warning(const, value)
    mod = self.is_a?(Module) ? self : self.class
    mod.send(:remove_const, const) if mod.const_defined?(const)
    mod.const_set(const, value)
  end
end

module Fog
  module Compute
    class AWS
      NEW_FLAVORS = FLAVORS + [
        {
          :id =&amp;gt; &amp;quot;d2.xlarge&amp;quot;,
          ...
        },
        {
          :id =&amp;gt; &amp;quot;d2.2xlarge&amp;quot;,
          ...
        },
        {
          :id =&amp;gt; &amp;quot;d2.4xlarge&amp;quot;,
          ...
        },
        {
          :id =&amp;gt; &amp;quot;d2.8xlarge&amp;quot;,
          ...
        }
      ]

      redef_without_warning :FLAVORS, NEW_FLAVORS

    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;总结:aca85750c766d78d41bd1c15f9f6ff31&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;通过在自己的代码中添加一个 Monkey patch，我们成功地实现了向 fog 中动态添加新实例类型。我司终于可以使用 fog 创建 D2 类型的机器了；而且这个方法改动的代码量最小，也更加容易维护。&lt;/p&gt;

&lt;p&gt;Monkey Patch 并非是完美的解决方法，它会引入一些&lt;a href=&#34;https://en.wikipedia.org/wiki/Monkey_patch#Pitfalls&#34;&gt;陷阱&lt;/a&gt;。所以这个技巧在软件工程领域还有一些争议。不过，我还是觉得 Monkey Patch 是一个不错的零时性解决方法。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;参考文章:aca85750c766d78d41bd1c15f9f6ff31&#34;&gt;参考文章&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.justinweiss.com/blog/2015/01/20/3-ways-to-monkey-patch-without-making-a-mess/&#34;&gt;3 Ways to Monkey-patch Without Making a Mess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://devblog.avdi.org/2008/02/23/why-monkeypatching-is-destroying-ruby/&#34;&gt;Monkeypatching is Destroying Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Travis CI</title>
            <link>http://yumminhuang.github.io/blog/2015/06/20/travis-ci/</link>
            <pubDate>Sat, 20 Jun 2015 00:00:00 +0000</pubDate>
            
            <guid>http://yumminhuang.github.io/blog/2015/06/20/travis-ci/</guid>
            <description>

&lt;p&gt;本文将主要介绍如何使用 &lt;a href=&#34;https://travis-ci.org&#34;&gt;Travis CI&lt;/a&gt; 托管 Github 上的开源项目，从而实现自动化测试、部署。同时，还将介绍使用 &lt;a href=&#34;https://coveralls.io/&#34;&gt;Coveralls&lt;/a&gt; 来监测测试覆盖率。&lt;/p&gt;

&lt;h2 id=&#34;travis-ci:583dfe1ccd5a6962c32f3c2bbdee5427&#34;&gt;Travis CI&lt;/h2&gt;

&lt;p&gt;Travis CI 是一款 Web 端的 &lt;ruby&gt; 持续 &lt;rt&gt;Continuous&lt;/rt&gt;&lt;/ruby&gt; &lt;ruby&gt; 集成 &lt;rt&gt;Integration&lt;/rt&gt;&lt;/ruby&gt; 工具。&lt;/p&gt;

&lt;p&gt;Travis CI 采用 &lt;a href=&#34;https://en.wikipedia.org/wiki/Freemium&#34;&gt;「Freemium」&lt;/a&gt; 的模式：对 Github 上的开源项目免费，付费的话则可以托管私有项目。Github 上很多知名的开源项目都适用 Travis CI 来进行自动化测试。&lt;/p&gt;

&lt;p&gt;和 Jenkins 相比，Travis CI 要轻量很多。但是已经足以完成简单的自动化测试、部署。&lt;/p&gt;

&lt;h2 id=&#34;coveralls:583dfe1ccd5a6962c32f3c2bbdee5427&#34;&gt;Coveralls&lt;/h2&gt;

&lt;p&gt;Coveralls 用来显示代码覆盖率，从而可以让程序员及时了解代码质量。&lt;/p&gt;

&lt;p&gt;Coveralls 和 Travis CI 一样，仅对 Github 上的开源项目免费。Coveralls 支持包括 Travis CI、Jenkins 在内的绝大多数持续集成工具。&lt;/p&gt;

&lt;h2 id=&#34;样例:583dfe1ccd5a6962c32f3c2bbdee5427&#34;&gt;样例&lt;/h2&gt;

&lt;p&gt;接下来以 Python 项目为例，说明如何使用 Travis CI 和 Coveralls&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:583dfe1ccd5a6962c32f3c2bbdee5427:src&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:583dfe1ccd5a6962c32f3c2bbdee5427:src&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;依赖管理和虚拟环境:583dfe1ccd5a6962c32f3c2bbdee5427&#34;&gt;依赖管理和虚拟环境&lt;/h3&gt;

&lt;p&gt;我喜欢为每个项目新建一个 &lt;ruby&gt;virtualenv&lt;rt&gt; 虚拟环境 &lt;/rt&gt;&lt;/ruby&gt;，这样可以确保每个项目的开发环境相互独立，避免发生冲突。&lt;a href=&#34;https://virtualenvwrapper.readthedocs.org/en/latest/&#34;&gt;virtualenvwrapper&lt;/a&gt; 是一个让人方便使用 virtualenv 的小工具。它把如新建 virtualenv、切换 virtualenv 等常用的操作都封装成了简单的指令。&lt;/p&gt;

&lt;p&gt;我一般会在项目中添加一个 &lt;code&gt;requirements.txt&lt;/code&gt;，里面列出项目所依赖的 Pip 库。这样在 virtualenv 中，直接运行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就可以安装所有的库。&lt;/p&gt;

&lt;h3 id=&#34;单元测试和测试覆盖:583dfe1ccd5a6962c32f3c2bbdee5427&#34;&gt;单元测试和测试覆盖&lt;/h3&gt;

&lt;p&gt;对于 Python 项目，我喜欢使用 &lt;a href=&#34;https://nose.readthedocs.org/en/latest/&#34;&gt;nose&lt;/a&gt; 来进行单元测试。此外，我还会使用 &lt;a href=&#34;http://nedbatchelder.com/code/coverage/&#34;&gt;coverage.py&lt;/a&gt; 来测量代码的测试覆盖率。&lt;/p&gt;

&lt;p&gt;nose 对 coverage.py 的支持非常好，可以在 &lt;code&gt;nosetests&lt;/code&gt; 命令后添加一系列选项来生成覆盖率。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nosetests --with-coverage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就可以直接得到测试覆盖率的数据。&lt;/p&gt;

&lt;p&gt;详细的使用方法可以参见 &lt;a href=&#34;https://nose.readthedocs.org/en/latest/&#34;&gt;nose 的官方文档&lt;/a&gt; 和&lt;a href=&#34;http://nedbatchelder.com/code/coverage/cmd.html&#34;&gt;coverage.py 的官方文档&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;持续集成:583dfe1ccd5a6962c32f3c2bbdee5427&#34;&gt;持续集成&lt;/h3&gt;

&lt;p&gt;在 Github 上新建项目之后，在 Travis CI 的页面上开启该项目。（新建的项目可能不会及时出现在 Travis CI 页面上，需要手动同步一下 Github 的项目。）接着，在 Github 项目里添加 Travis CI 的配置文件 &lt;code&gt;.travis.yml&lt;/code&gt;。Travis CI 的配置使用的是非常易读的 YAML 文件。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;language: python
python:
    - 2.6
    - 2.7
# command to install dependencies
install:
    - pip install -r requirements.txt
    - pip install coveralls
# command to run tests
script:
    nosetests --cover-package=project --with-coverage
# coveralls
after_success:
    coveralls

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样地，也需要在 Coveralls 上开启相应的项目。&lt;/p&gt;

&lt;p&gt;这样，Github 的代码库在每次收到 &lt;code&gt;Push&lt;/code&gt; 和 &lt;code&gt;Pull Request&lt;/code&gt; 的时候，Travis CI 都会按照配置文件上的步骤自动运行测试（或者部署，本样例只有测试。），并且把测试覆盖率的数据发布到 Coveralls。&lt;/p&gt;

&lt;p&gt;详细的配置说明可以参见 &lt;a href=&#34;http://docs.travis-ci.com/&#34;&gt;Travis CI 的官方文档&lt;/a&gt; 和&lt;a href=&#34;https://coveralls.zendesk.com/hc/en-us&#34;&gt;Coveralls 的官方文档&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;其它:583dfe1ccd5a6962c32f3c2bbdee5427&#34;&gt;其它&lt;/h3&gt;

&lt;p&gt;Travis CI 和 Coveralls 都可以生成 &lt;ruby&gt; 图章 &lt;rt&gt;Badge&lt;/rt&gt;&lt;/ruby&gt;，用来显示 &lt;ruby&gt; 构建 &lt;rt&gt;Build&lt;/rt&gt;&lt;/ruby&gt; 的结果，或者测试覆盖率。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/yumminhuang/turbo-octo-meme&#34;&gt;&lt;img src=&#34;https://travis-ci.org/yumminhuang/turbo-octo-meme.svg?branch=master&#34; alt=&#34;Build Status&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可以将这些图章（如果已经发布到 PyPi，还可以加上版本号、下载量的图章。）放在项目的 &lt;em&gt;README&lt;/em&gt; 文件里。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:583dfe1ccd5a6962c32f3c2bbdee5427:src&#34;&gt;详细代码可参见 &lt;a href=&#34;https://github.com/yumminhuang/turbo-octo-meme&#34;&gt;turbo-octo-meme&lt;/a&gt;。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:583dfe1ccd5a6962c32f3c2bbdee5427:src&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Jenkins 简介</title>
            <link>http://yumminhuang.github.io/blog/2015/06/02/jenkins-%E7%AE%80%E4%BB%8B/</link>
            <pubDate>Tue, 02 Jun 2015 00:00:00 +0000</pubDate>
            
            <guid>http://yumminhuang.github.io/blog/2015/06/02/jenkins-%E7%AE%80%E4%BB%8B/</guid>
            <description>

&lt;p&gt;在&lt;a href=&#34;http://yumminhuang.github.io/ji-yu-jenkinsde-pythondai-ma-ji-cheng-zheng-he.html&#34;&gt;之前的一篇文章中&lt;/a&gt;，曾经提及过 Jenkins。在本次实习中，Jenkins 是我每天都要使用的工具。在频繁的使用过程当中：通过实际工作感受了「持续集成」的概念（关于持续集成的概念，此处按下不表，待有时间的时候再详细总结。）；逐渐熟悉了 Jenkins 的使用，并且体会到其带来的方便。因此，希望总结一下 Jenkins 的使用。&lt;/p&gt;

&lt;p&gt;然而 Jenkins 不通过具体的案例难以体会其方便之处，网上相关使用说明之类的文章又颇多，所以本文仅谈个人使用中的体会，并非学习Jenkins使用的教程。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jenkins是什么:e83bca251359d2ad1ae1277c1018011a&#34;&gt;Jenkins是什么&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://jenkins-ci.org/&#34;&gt;Jenkins&lt;/a&gt; 是一个用 Java 编写的开源的&lt;ruby&gt;持续&lt;rt&gt;Continuous&lt;/rt&gt;&lt;/ruby&gt; &lt;ruby&gt;集成&lt;rt&gt;Integration&lt;/rt&gt;&lt;/ruby&gt;工具。&lt;/p&gt;

&lt;p&gt;Jenkins 是用 Java 开发的（界面和 Eclipse一样，带着一股浓浓的 SWT 的味道，好在界面并不太影响使用。），对 Java 程序开发有天然的良好支持，如 JUnit/TestNG 测试，Maven、Ant 等 Java 开发中常用的工具都包含在 Jenkins 里。当然，Jenkins 也可以通过插件来实现其它语言的开发。&lt;/p&gt;

&lt;h3 id=&#34;jenkins的特性:e83bca251359d2ad1ae1277c1018011a&#34;&gt;Jenkins的特性&lt;/h3&gt;

&lt;p&gt;在使用的过程中，我体会比较深刻的特性有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;项目易于配置&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在 Jenkins 当中，我们可以新建 Job。在 Job 里，可以设置添加&lt;ruby&gt;构建脚本&lt;rt&gt;Build Script&lt;/rt&gt;&lt;/ruby&gt;。构建脚本支持 Bash、Ant、Makefile；Job 的参数、&lt;ruby&gt;元&lt;rt&gt;Meta&lt;/rt&gt;&lt;/ruby&gt;数据可以作为环境变量在脚本里直接使用，因此设置起来非常方便。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;种类繁多的插件&lt;/strong&gt;（这点也和 Eclipse 也颇为相似）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jenkins 的开发者社区非常活跃，&lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Plugins&#34;&gt;第三方插件&lt;/a&gt;很多，从而可以帮助我们实现很多常用的功能。
比如，Hipchat 插件可以在 Job 运行结束后把结果发送到 Hipchat 的聊天室里；Cobertura 插件可以显示测试覆盖率的数据。&lt;/p&gt;

&lt;h3 id=&#34;jenkins的使用场景:e83bca251359d2ad1ae1277c1018011a&#34;&gt;Jenkins的使用场景&lt;/h3&gt;

&lt;p&gt;在我们公司，Jenkins 主要被用来用于：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;ruby&gt;构建&lt;rt&gt;Build&lt;/rt&gt;&lt;/ruby&gt;、&lt;ruby&gt;测试&lt;rt&gt;Test&lt;/rt&gt;&lt;/ruby&gt;、&lt;ruby&gt;部署&lt;rt&gt;Deploy&lt;/rt&gt;&lt;/ruby&gt;代码&lt;/strong&gt;；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们可以通过一个 Job 实现以下流程：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;使用 Git 插件，从代码库下载任一版本或分支的源代码；&lt;/li&gt;
&lt;li&gt;编译代码；&lt;/li&gt;
&lt;li&gt;运行测试。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;或者是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;启动若干个 EC2 实例；&lt;/li&gt;
&lt;li&gt;将任一版本的代码部署到新建的实例上。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所有的这些流程在 Jenkins 里，都只需要设置几个简单的参数（如分支的名称，或者是实例的个数），再点击运行按钮就可以了。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自动化一些复杂的流程，如数据库的迁移、备份，系统更新的安装等等&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有一些常用，但是流程很复杂的过程，可以在 Jenkins 里通过 Job 来完成。&lt;/p&gt;
</description>
          </item>
        
      
    
      
    
      
        
          <item>
            <title>基于 Jenkins 的 Python 代码集成整合</title>
            <link>http://yumminhuang.github.io/blog/2015/04/17/%E5%9F%BA%E4%BA%8E-jenkins-%E7%9A%84-python-%E4%BB%A3%E7%A0%81%E9%9B%86%E6%88%90%E6%95%B4%E5%90%88/</link>
            <pubDate>Fri, 17 Apr 2015 00:00:00 +0000</pubDate>
            
            <guid>http://yumminhuang.github.io/blog/2015/04/17/%E5%9F%BA%E4%BA%8E-jenkins-%E7%9A%84-python-%E4%BB%A3%E7%A0%81%E9%9B%86%E6%88%90%E6%95%B4%E5%90%88/</guid>
            <description>

&lt;p&gt;实习中最近做了一个多月的项目是将代码测试覆盖率整合到公司持续整合（Continuous Integration）的流程当中。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This project uses Java and XML. How it could be good?&lt;/p&gt;

&lt;p&gt;——组里的同事如此评价本项目&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本文介绍该项目的大致流程，共分为两部分：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;介绍 *Automated python unit testing, code coverage and code quality analysis with Jenkins*（&lt;a href=&#34;http://bhfsteve.blogspot.com/2012/04/automated-python-unit-testing-code.html&#34;&gt;part1&lt;/a&gt;, &lt;a href=&#34;http://bhfsteve.blogspot.com/2012/04/automated-python-unit-testing-code_20.html&#34;&gt;part2&lt;/a&gt;, &lt;a href=&#34;http://bhfsteve.blogspot.com/2012/04/automated-python-unit-testing-code_27.html&#34;&gt;part3&lt;/a&gt;）中使用 Jenkins 实现自动化测试、得到代码覆盖率和代码质量的方法。&lt;/li&gt;
&lt;li&gt;简要介绍我们如何在这篇文章的基础上把代码覆盖率整合到公司的 Bitbucket 代码库当中。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;基于-jenkins-的-python-自动化测试工具:fc2286d3c2ea2f10cc076fd6905b3f97&#34;&gt;基于 Jenkins 的 Python 自动化测试工具&lt;/h3&gt;

&lt;p&gt;使用到的 Python 模块：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nedbatchelder.com/code/coverage/&#34;&gt;coverage&lt;/a&gt;：用来生成代码覆盖率的数据；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nose.readthedocs.org/en/latest/&#34;&gt;nose&lt;/a&gt;: 用来运行单元测试；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pylint.org&#34;&gt;pylint&lt;/a&gt;：用来得到 Python 代码质量的数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用到的 Jenkins 插件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Cobertura+Plugin&#34;&gt;Cobertura plugin&lt;/a&gt;：用来显示代码覆盖率；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin&#34;&gt;GIT plugin&lt;/a&gt;：用来获取最新的代码；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Violations&#34;&gt;Violations plugin&lt;/a&gt;：用来显示 pylint 的结果。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;安装需要的 Jenkins 插件之后，在 Jenkins 当中新建一个作业（Job）接下来进行设置。&lt;/p&gt;

&lt;h4 id=&#34;从哪里得到代码:fc2286d3c2ea2f10cc076fd6905b3f97&#34;&gt;从哪里得到代码&lt;/h4&gt;

&lt;p&gt;如下图所以，在 Jenkins 的 &lt;strong&gt;Source Code Management&lt;/strong&gt; 当中可以添加 Git Repository。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://2.bp.blogspot.com/-hDwb_sbJZHk/T5lzDbCT76I/AAAAAAAAADg/adELp3TAeV8/s1600/Source+code.png&#34; alt=&#34;SCM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Jenkins 同样支持 subversion 等 CVS 工具。&lt;/p&gt;

&lt;h4 id=&#34;什么时候运行作业:fc2286d3c2ea2f10cc076fd6905b3f97&#34;&gt;什么时候运行作业&lt;/h4&gt;

&lt;p&gt;在 Jenkins 中可以将 &lt;strong&gt;Build Triggers&lt;/strong&gt; 设置为 &lt;strong&gt;Poll SCM&lt;/strong&gt; 对代码库进行轮询。如下图，&lt;strong&gt;Schedule&lt;/strong&gt; 设为 &lt;code&gt;* * * * *&lt;/code&gt;（含义和 Cron 一样）表示每分钟检查一次代码库，看是否有更新。如果代码库有更新的话则运行 &lt;strong&gt;Build&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://3.bp.blogspot.com/-DewpmzsyWZo/T5lzXqPVOlI/AAAAAAAAADo/OA2Fxd1YTzY/s1600/Build+triggers.png&#34; alt=&#34;Poll SCM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当然，也可以使用 &lt;a href=&#34;http://git-scm.com/book/zh/v2/Customizing-Git-Git-Hooks&#34;&gt;Git Hook&lt;/a&gt;，从而避免轮询消耗过多的资源。&lt;/p&gt;

&lt;h4 id=&#34;运行什么:fc2286d3c2ea2f10cc076fd6905b3f97&#34;&gt;运行什么&lt;/h4&gt;

&lt;p&gt;添加一段 &lt;strong&gt;Build Script&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PYTHONPATH=&#39;&#39;
nosetests --with-xunit --all-modules --traverse-namespace --with-coverage --cover-package=project1 --cover-inclusive
python -m coverage xml --include=project1*
pylint -f parseable -d I0011,R0801 project1 | tee pylint.out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段 Shell 脚本中的三个命令：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;nosetests&lt;/code&gt; 命令运行单元测试；&lt;/li&gt;
&lt;li&gt;运行 &lt;code&gt;coverage&lt;/code&gt;，将覆盖率数据输出为 xml 文件；&lt;/li&gt;
&lt;li&gt;运行 &lt;code&gt;pylint&lt;/code&gt; 得到代码的质量数据。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;具体参数的含义可以参阅原文的第一、第二部分。&lt;/p&gt;

&lt;h4 id=&#34;显示结果:fc2286d3c2ea2f10cc076fd6905b3f97&#34;&gt;显示结果&lt;/h4&gt;

&lt;p&gt;上一步的 Build Script 有三个输出文件：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;nosetests.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverage.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pylint.out&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;接着，在 Jenkins 当中，在 &lt;strong&gt;Publish JUnit test result report&lt;/strong&gt; 添加 &lt;code&gt;nosetests.xml&lt;/code&gt; 显示单元测试的结果。在 Cobertura 插件 &lt;strong&gt;Publish Cobertura Coverage Report&lt;/strong&gt; 里添加 &lt;code&gt;coverage.xml&lt;/code&gt; 显示测试代码覆盖率。在 &lt;strong&gt;Report Violations&lt;/strong&gt; 里添加 &lt;code&gt;pylint.out&lt;/code&gt; 显示代码质量报告。&lt;/p&gt;

&lt;p&gt;最终，运行一次作业之后，Jenkins 将可以得到下图显示的测试报告。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://4.bp.blogspot.com/-f_YtJcTOQ64/T5qnlOiE35I/AAAAAAAAAF8/l5Nl_YvRSuM/s1600/jenkins+after+logout+added.png&#34; alt=&#34;Jenkins Output&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;持续整合:fc2286d3c2ea2f10cc076fd6905b3f97&#34;&gt;持续整合！&lt;/h3&gt;

&lt;p&gt;我们持续整合的大致流程是这样的。在代码库中有一个 Master 分支，开发人员添加新功能，修复 Bug 都需要在新建的分支里进行。每新建一个合并到到 Master 的 Pull Request 时，Jenkins 可以自动运行测试。测试通过则在 Bitbucket 的 Pull Request 页面里添加一个的评论表示可以合并，否则会添加一个否决的评论。这个项目的目标就是再添加一个关于测试覆盖率的评论。&lt;/p&gt;

&lt;p&gt;我们按照 &lt;em&gt;Automated python unit testing, code coverage and code quality analysis with Jenkins&lt;/em&gt; 一文的思路实现了测试覆盖率的部分，区别是我们的代码库里包括 Java 和 Python 两种语言的代码，需要同时处理两份数据。经过一段时间的攻关之后，我们终于可以得到代码覆盖的数据。&lt;/p&gt;

&lt;p&gt;相较于测试覆盖率的具体数值，我们更关心覆盖率的变化值。我们希望知道合并一个分支之后，测试覆盖率是增加了还是减少了。因此，现在我们需要得到测试覆盖率的变化值（Coverage diff）。&lt;/p&gt;

&lt;p&gt;没想到 Python 连这种冷僻的使用场景都有第三方的库支持，还不只一个。我们使用的是 &lt;a href=&#34;https://github.com/SurveyMonkey/pycobertura&#34;&gt;Pycobertura&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Pycobertura 可以直接比较两个 Cobertura 格式的 xml 文件，从而得到覆盖率的变化值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from pycobertura import Cobertura
from pycobertura import TextReporterDelta

coverage1 = Cobertura(&#39;coverage1.xml&#39;)
coverage2 = Cobertura(&#39;coverage2.xml&#39;)
delta = TextReporterDelta(coverage1, coverage2)
delta.generate()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;于是，我创建了一个 Fabric Task，调用 Pycobertura 分析测试生成的 xml 文件和 Master branch 的 xml 文件。在 Jenkins 里添加一段 &lt;strong&gt;Post build script&lt;/strong&gt; 来运行 Fabric，这样 Build 完成之后就可以运行 Fabric 程序得到类似下面的输出结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Coverage Diff for Java code:
No coverage diff can be found.
Coverage Diff for Python code:
Name          Stmts    Miss    Cover
------------  -------  ------  --------
dummy/dummy   -        -2      +50.00%
dummy/dummy2  +2       -       +100.00%
TOTAL         +2       -2      +50.00%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后剩下的就是把之前一步的结果以评论的形式发布到 Bitbucket 里。这里，我们又添加了一个 Fabric 的 Task，通过调用 Bitbucket 的 API 把得到的结果发布到 Pull Request 的页面里。&lt;/p&gt;

&lt;h3 id=&#34;参考文献:fc2286d3c2ea2f10cc076fd6905b3f97&#34;&gt;参考文献&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://bhfsteve.blogspot.com/2012/04/automated-python-unit-testing-code_27.html&#34;&gt;Automated python unit testing, code coverage and code quality analysis with Jenkins - part 3&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
          </item>
        
      
    
  </channel>
</rss>
