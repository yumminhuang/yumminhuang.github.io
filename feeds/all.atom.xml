<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Yaming Huang</title><link href="http://yumminhuang.github.io/" rel="alternate"></link><link href="http://yumminhuang.github.io/feeds/all.atom.xml" rel="self"></link><id>http://yumminhuang.github.io/</id><updated>2015-03-31T20:49:00-04:00</updated><entry><title>i3窗口管理器简介</title><link href="http://yumminhuang.github.io/i3chuang-kou-guan-li-qi-jian-jie.html" rel="alternate"></link><updated>2015-03-31T20:49:00-04:00</updated><author><name>Yumminhuang</name></author><id>tag:yumminhuang.github.io,2015-03-29:i3chuang-kou-guan-li-qi-jian-jie.html</id><summary type="html">&lt;p&gt; 在 &lt;a href="http://kernelpanic.fm"&gt; 内核恐慌 &lt;/a&gt; 第九期 &lt;a href="http://ipn.li/kernelpanic/9/"&gt;「程序员的理想工作环境」&lt;/a&gt; 中，主持人 Rio 和吴涛谈及了 Tiling Window Manager，并且介绍了 &lt;a href="http://awesome.naquadah.org/"&gt;Awesome 窗口管理器 &lt;/a&gt; 和 i3 窗口管理器。节目中两位主持人的描述恰好符合我的需求，并且实习所用的笔记本操作系统恰好是 Ubuntu，所以听完节目后，我也试着在办公电脑上安装了 Awesome。然而体验并不愉快，我为此在微博上 &lt;a href="http://www.weibo.com/2622511625/C1N9FgPr5"&gt; 吐槽 &lt;/a&gt;。之后在 Rio 的建议下，我安装了 i3，果然非常好用。这里，结合我两个月的使用体验，简单地介绍一下 i3 窗口管理器，并且推荐大家使用。&lt;/p&gt;
&lt;h2&gt; 平铺式窗口管理器 &lt;/h2&gt;
&lt;p&gt; 窗口管理器（Window manager）是在图形用户界面的视窗系统中，用来控制窗口位置与外观的系统软件。&lt;/p&gt;
&lt;p&gt; 窗口管理器主要有两种 &lt;sup id="fnref:type"&gt;&lt;a class="footnote-ref" href="#fn:type" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 堆叠式窗口管理器（Stacking Window Manager）；&lt;/li&gt;
&lt;li&gt; 平铺式窗口管理器（Tiling Window Manager）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 在 &lt;a href="http://en.wikipedia.org/wiki/Stacking_window_manager"&gt; 堆叠式管理器 &lt;/a&gt;（也称作悬浮式窗口管理器，Floating Window Manager）中，不同窗口可以像桌子上随意摆放的白纸一样相互重叠。常见的窗口管理器多为堆叠式，如 Windows 的 Explorer，Mac OS X 的 Finder，以及 Ubuntu 的 Unity 等等。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Tiling_window_manager"&gt; 平铺式 &lt;/a&gt;（或直译为瓦片式）窗口管理器，其中的窗口不能够重叠，而是像瓦片一样挨个摆放。常用的平铺式管理器有 Awesome 和 i3。&lt;/p&gt;
&lt;p&gt; 根据我个人的使用体验，平铺式窗口管理器（主要指的是 i3）有以下几个优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 简单轻巧；&lt;/li&gt;
&lt;li&gt; 多依赖键盘操作，较少使用鼠标；&lt;/li&gt;
&lt;li&gt; 高度可定制化；&lt;/li&gt;
&lt;li&gt; 稳定。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 具体来说。平铺式窗口管理器没有绚丽的界面和复杂的功能，可以让人更加专注于正在做的事情。同时，平铺式管理器非常精简，如 i3 的安装包只有 900 多 KB，相应地，消耗的资源也更少。平铺式管理器多依赖键盘操作，较少使用鼠标，配合应用程序的快捷键，基本上可以避免鼠标操作，从而提升工作效率。平铺式管理器不仅可以实现边框颜色之类的常规设置，还可以根据用户的需求，修改桌面、窗口等。最后，因为平铺式管理器非常精简，较之堆叠式管理器也更加稳定。至少在我使用的两个月里还没有出现过崩溃的情况。&lt;/p&gt;
&lt;p&gt; 我觉得在工作环境中需要同时打开多个窗口，又拥有多台显示器的时候，就像下图中那样，平铺式窗口管理器最能发挥作用。
&lt;img alt="i3 配合多屏幕 " src="http://awesome.naquadah.org/images/6mon.small.png" /&gt;&lt;/p&gt;
&lt;p&gt; 比如我工作时有一台 13 寸的笔记本和一台 27 寸的外接显示器。时刻保持打开的窗口包括公司内交流用的即时聊天软件，邮件客户端，编辑器，浏览器和多个终端窗口。使用 i3 之后，我的两个显示器基本是这样分配的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 笔记本显示器左右分割为两栏，分别显示聊天软件和邮件客户端；&lt;/li&gt;
&lt;li&gt; 外接显示器分为两栏；&lt;/li&gt;
&lt;li&gt; 第一栏又分两列，分别给编辑器和调试、运行用的终端；&lt;/li&gt;
&lt;li&gt; 第二栏也分两列，分别给浏览器和其它用的终端（常用的是远程登录、监控系统）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 虽然需要同时打开了很多软件，但是因为窗口是平铺的，每次要切换软件时，只需要将屏幕的焦点切换到相应的窗口即可，而不需要像堆叠式管理器那样在凌乱的桌面上找到要用的窗口。&lt;/p&gt;
&lt;h2&gt;i3 窗口管理器的基本操作 &lt;/h2&gt;
&lt;h3&gt; 按键 &lt;/h3&gt;
&lt;p&gt;i3 窗口管理器操作中非常不同的是需要设置一个 &lt;code&gt;MOD&lt;/code&gt; 键，用来执行指令。
我用的是一般 PC 键盘上没什么用的 Windows 键 (Mod4)。为此，我特意把 &lt;a href="http://instagram.com/p/0N9WKCBDZt/"&gt; 办公室的键盘 &lt;/a&gt; 的 Windows 键换成了醒目的红色。&lt;/p&gt;
&lt;p&gt; 具体按键对应的指令参见下面两幅图：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i3wm.org/docs/keyboard-layer1.png" width="600"/&gt;&lt;/p&gt;
&lt;p&gt; 按下 &lt;code&gt;MOD&lt;/code&gt; 键时对应的指令 &lt;/p&gt;
&lt;p&gt;&lt;img src="http://i3wm.org/docs/keyboard-layer2.png" width="600"/&gt;&lt;/p&gt;
&lt;p&gt; 按下 &lt;code&gt;MOD+Shift&lt;/code&gt; 键时对应的指令 &lt;/p&gt;
&lt;h3&gt; 容器 &lt;/h3&gt;
&lt;p&gt;i3 窗口管理器有一个很重要的概念就是容器（Container）。每个容器内可以存放一个应用程序的窗口。一个桌面（或者说 Workspace）就是一个容器。容器可以嵌套形成树型的结构，所以我们可以将容器水平或者垂直地分割成多个容器，从而充分利用桌面的空间。详细解释请参阅 &lt;a href="http://i3wm.org/docs/userguide.html#_tree"&gt; 文档 &lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt; 常用的指令 &lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MOD + H, J, K, L&lt;/code&gt;：移动屏幕焦点；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MOD + Shift + H, J, K, L&lt;/code&gt;：移动容器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MOD + V&lt;/code&gt;：垂直分割容器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MOD + H&lt;/code&gt;：水平分割容器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MOD + D&lt;/code&gt;：打开应用程序启动器 Dmenu；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MOD + Enter&lt;/code&gt;：打开终端。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;i3 窗口管理器的安装和配置 &lt;/h2&gt;
&lt;h3&gt; 安装 &lt;/h3&gt;
&lt;p&gt; 以 Ubuntu 为例。首先添加 i3 到源列表。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;echo &amp;quot;deb http://debian.sur5r.net/i3/ $(lsb_release -c -s) universe&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 然后运行以下指令进行安装。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;apt-get update
apt-get --allow-unauthenticated install sur5r-keyring
apt-get install i3
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt; 配置 &lt;/h3&gt;
&lt;p&gt; 我之所以放弃 Awesome 的一个很重要的原因就是它的配置过于复杂。诚然，Awesome 的效果要比 i3 酷炫很多，但是设置需要用到 Lua 脚本。很多功能还需要通过安装插件来完成。相反，i3 只需要两个设置文件，而且用的是非常易读的语法。&lt;/p&gt;
&lt;p&gt; 配置文件包括两部分，&lt;code&gt;~/.config/i3/config&lt;/code&gt; 和 &lt;code&gt;~/.config/i3status/config&lt;/code&gt;，分别用来设置 i3 窗口管理器和状态栏 &lt;sup id="fnref:config"&gt;&lt;a class="footnote-ref" href="#fn:config" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt; 在这里贴一下我自己的 &lt;a href="https://github.com/yumminhuang/dotfiles/blob/master/files/i3_config"&gt;i3 配置文件 &lt;/a&gt; 和 &lt;a href="https://github.com/yumminhuang/dotfiles/blob/master/files/i3status_config"&gt;i3 状态栏的配置文件 &lt;/a&gt;，基本上每条设置都做了注释，以供读者参考。&lt;/p&gt;
&lt;p&gt; 想要了解更加具体的配置方法，可以参阅 i3 的 &lt;a href="http://i3wm.org/docs/"&gt; 官方文档 &lt;/a&gt;。&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:type"&gt;
&lt;p&gt; 事实上，一些窗口管理器，如 Awesome 和 i3，支持堆叠式和平铺式两种窗口管理器的形式。这样的窗口管理器被称作 &lt;a href="http://en.wikipedia.org/wiki/Dynamic_window_manager"&gt;「动态式窗口管理器」&lt;/a&gt;。因为本文主要介绍 i3 作为平铺的特性，故将其划为平铺式窗口管理器。&amp;#160;&lt;a class="footnote-backref" href="#fnref:type" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:config"&gt;
&lt;p&gt; 为了方便编辑，我把配置文件放在 &lt;code&gt;~&lt;/code&gt; 目录下，也可以放在其它目录下面。配置文件路径具体的读取顺序请参阅 &lt;a href="http://i3wm.org/docs/userguide.html#configuring"&gt; 关于 i3 设置的文档 &lt;/a&gt; 和 &lt;a href="http://i3wm.org/i3status/manpage.html#_options"&gt; 关于状态栏设置的文档 &lt;/a&gt;。&amp;#160;&lt;a class="footnote-backref" href="#fnref:config" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Linux"></category></entry><entry><title>在VPS搭建VPN服务器</title><link href="http://yumminhuang.github.io/zai-vpsda-jian-vpnfu-wu-qi.html" rel="alternate"></link><updated>2015-03-21T18:06:00-04:00</updated><author><name>Yumminhuang</name></author><id>tag:yumminhuang.github.io,2015-03-16:zai-vpsda-jian-vpnfu-wu-qi.html</id><summary type="html">&lt;h2&gt; 简介 &lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt; 从来就没有什么救世主 &lt;/p&gt;
&lt;p&gt; 也不靠神仙皇帝 &lt;/p&gt;
&lt;p&gt; 要创造人类的幸福 &lt;/p&gt;
&lt;p&gt; 全靠我们自己 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 为了在 &lt;a href="http://zh.wikipedia.org/wiki/ 防火长城 "&gt;GFW&lt;/a&gt; 的封锁之下进行正常的上网活动，可以使用 &lt;a href="http://zh.wikipedia.org/wiki/ 虛擬私人網路 "&gt;VPN&lt;/a&gt;。为什么有各种各样的 VPN 服务提供商还要自己搭建 VPN 呢？有以下几方面的考虑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 安全性：你很难知道一些 VPN 提供商是否会盗取你的敏感信息，自己搭建 VPN 则可以避免这个问题；&lt;/li&gt;
&lt;li&gt; 稳定：「道高一尺，魔高一丈」，现在很多 VPN 提供商都是打一枪换一个地方，难以保证稳定的连接；&lt;/li&gt;
&lt;li&gt; 价格：自己搭建 VPN，一个月的费用大概在 $5 左右。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt; 具体步骤 &lt;/h2&gt;
&lt;h4&gt; 注册一个 VPS 账号 &lt;/h4&gt;
&lt;p&gt; 注册任意一家 VPS 服务提供商的账号。此步可能需要一张双币信用卡。
至于选择哪家服务商，此处按下不表。下文以 &lt;strong&gt;DigitalOcean&lt;/strong&gt; 为例描述具体步骤。&lt;/p&gt;
&lt;h4&gt; 新建一个 Droplet&lt;/h4&gt;
&lt;p&gt; 我新建的 Droplet 是最低配置，具体配置包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;512MB RAM&lt;/li&gt;
&lt;li&gt;20GB SSD&lt;/li&gt;
&lt;li&gt;2TB 流量 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 地理位置选的是最近的。&lt;/p&gt;
&lt;p&gt; 操作系统开始选择的是 Ubuntu14.04，后来用的是 Ubuntu12.04（版本应该没有影响）。&lt;/p&gt;
&lt;p&gt; 没有选择多余的设置。&lt;/p&gt;
&lt;p&gt; 点击新建按钮会收到一份包含登陆密码的邮件。接着就可以通过 ssh 进行登录了。&lt;/p&gt;
&lt;p&gt; 其余添加用户、Linux 基本设置等内容在此不再赘述。&lt;/p&gt;
&lt;h4&gt; 安装 PPTP&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install pptpd
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt; 配置 &lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt; 配置 IP 地址 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 编辑 &lt;code&gt;/etc/pptpd.conf&lt;/code&gt;，添加以下内容 ( 基本上默认设置已经完成或者被注释了 )：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;option /etc/ppp/pptpd-options
localip 192.168.0.1
remoteip 192.168.0.100-200
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 这里是 PPTP 服务器的 IP 地址设为 &lt;code&gt;192.178.0.1&lt;/code&gt; ，把 PPTP 客户端的 IP 地址设置为 &lt;code&gt;192.168.0.100&lt;/code&gt; 到 &lt;code&gt;192.168.0.200&lt;/code&gt; 的区间内。当然你也可以自己的需要和喜欢进行相应的设置 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 配置客户端 DNS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 编辑 &lt;code&gt;/etc/ppp/pptpd-options&lt;/code&gt; ，添加 DNS 地址。这里我选择的是 &lt;a href="https://developers.google.com/speed/public-dns/"&gt;Google Public DNS&lt;/a&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ms-dns 8.8.8.8
ms-dns 8.8.4.4
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt; 添加用户 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 编辑 &lt;code&gt;/etc/ppp/chap-secrets&lt;/code&gt;，添加账号和密码。其中第一列为账户名，第二列为密码。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# client    server  secret          IP addresses
test        pptpd   1234            *
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt; 设置 IP 转发 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 打开 IPv4 转发，并重新载入设置。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo sed -i &amp;#39;s/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/g&amp;#39; /etc/sysctl.conf
sudo sysctl -p
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 为 PPTP 连接设置 NAT，否则不能访问别的网站。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 也可以直接编辑 &lt;code&gt;/etc/rc.local&lt;/code&gt;，在 &lt;code&gt;exit 0&lt;/code&gt; 之前添加以上内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 重启 PPTP&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo service pptpd restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 这样 PPTP 服务器就搭建完毕了，可以「科学上网」了！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 没有什么能够阻挡 &lt;/p&gt;
&lt;p&gt; 你对自由地向往 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h3&gt;Trouble Shooting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PPTP connection error: GRE: Bad checksum from pppd&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 第一次设置完毕之后尝试连接 VPN，发现连接失败。重新设置之后依然没有解决，以至于让我怀疑是 Ubuntu14.04 的问题。我新建了一个 Droplet，更换成 Ubuntu12.04 之后还是同样的问题。接着尝试用 &lt;code&gt;netstat&lt;/code&gt; 检查，发现连接已经建立，但是因为某种原因被断开了。检查 &lt;code&gt;/var/log/syslog&lt;/code&gt;，发现了以下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Mar 21 16:54:23 Server pptpd[1808]: GRE: Bad checksum from pppd.
Mar 21 16:54:53 Server pppd[1809]: LCP: timeout sending Config-Requests
Mar 21 16:54:53 Server pppd[1809]: Connection terminated.
Mar 21 16:54:53 Server pppd[1809]: Modem hangup
Mar 21 16:54:53 Server pppd[1809]: Exit.
Mar 21 16:54:53 Server pptpd[1808]: GRE: read(fd=6,buffer=80504c0,len=8196) from PTY failed: status = -1 error = Input/output error, usually caused by unexpected termination of pppd, check option syntax and pppd logs
Mar 21 16:54:53 Server pptpd[1808]: CTRL: PTY read or GRE write failed (pty,gre)=(6,7)
Mar 21 16:54:53 Server pptpd[1808]: CTRL: Reaping child PPP[1809]
Mar 21 16:54:53 Server pptpd[1808]: CTRL: Client 50.164.202.163 control connection finished
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 上网搜索，在 StackOverflow 上找到了 &lt;a href="http://stackoverflow.com/a/21347817"&gt; 答案 &lt;/a&gt;。至此，终于定位到无法连接的根本原因 —— 是 TMD 路由器不支持 &lt;code&gt;PPTP Passthrough&lt;/code&gt; 功能。我上路由器厂商的官网一看，果然发现了去年 12 月发布了一个固件更新用来修复 VPN 连接的问题。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;VPS 服务提供商选择 &lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Amazon Web Service&lt;ul&gt;
&lt;li&gt; 大公司，服务稳定，无须担心亚马逊被封（因为亚马逊非常熟悉中国的那一套，&lt;a href="http://zhuanlan.zhihu.com/riobard/19910423"&gt; 有图 &lt;/a&gt; 为证）；&lt;/li&gt;
&lt;li&gt; 高度可定制；&lt;/li&gt;
&lt;li&gt; 丰富的文档、社区支持；&lt;/li&gt;
&lt;li&gt; 按小时收费，新注册用户可以免费使用一年；&lt;/li&gt;
&lt;li&gt; 可以将虚拟机部署在东京，理论上访问速度更快。&lt;/li&gt;
&lt;li&gt; 缺点：&lt;strong&gt; 设置复杂 &lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DigitalOcean&lt;ul&gt;
&lt;li&gt; 可选择包月套餐，性价比更高；&lt;/li&gt;
&lt;li&gt; 控制台界面清爽、简洁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linode 似乎很多人在用，一个老牌的 VPS 提供商，但是我没有用过。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 如果你选择 DigitalOcean，点击 &lt;a href="https://www.digitalocean.com/?refcode=ba81ee4b40b2"&gt; 链接 &lt;/a&gt; 注册，可以获得 10 美元的优惠。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt; 参考文献：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-setup-your-own-vpn-with-pptp"&gt;How To Setup Your Own VPN With PPTP -- DigitalOcean.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://riobard.com/2011/11/12/pptp-vpn-on-ubuntu/"&gt;Configure PPTP VPN on Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="DevOps"></category><category term="Linux"></category></entry><entry><title>Yelp Interview Problem</title><link href="http://yumminhuang.github.io/yelp-interview-problem.html" rel="alternate"></link><updated>2014-11-18T18:02:00-05:00</updated><author><name>Yumminhuang</name></author><id>tag:yumminhuang.github.io,2014-11-18:yelp-interview-problem.html</id><summary type="html">&lt;p&gt;Today, I had a skype interview with Yelp.&lt;/p&gt;
&lt;h3&gt;Interview&lt;/h3&gt;
&lt;p&gt;At first, the interviewer asked me about my experience. Then, he asked me some technical questions, such as &lt;em&gt;What will cause access a website slowly?&lt;/em&gt;, &lt;em&gt;Difference between thread and process&lt;/em&gt;, &lt;em&gt;What is deadlock?&lt;/em&gt; or &lt;em&gt;What's your favorite programming language? And why?&lt;/em&gt;. The last part of the interview is a coding question. The interviewer sent me a link of &lt;a href="http://coderpad.io"&gt;CoderPad&lt;/a&gt; and asked me to write code on it.&lt;/p&gt;
&lt;h3&gt;Coding Problem Description&lt;/h3&gt;
&lt;p&gt;The problem is not very difficult. Write a function to &lt;strong&gt;find the longest prefix of a list of string.&lt;/strong&gt; For example,
&lt;code&gt;['abc', 'abcde', 'abxyz'] =&amp;gt; 'ab'&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Solutions&lt;/h3&gt;
&lt;p&gt;During the interview, I spent some time to finish it due to the pressure from time and the interviewer. He asked me to review the code after I finished by walking through each step in my function. This process did help me complete the task, cause I found some bugs in my code and fixed them in time. He also asked me the time complexity of my solution. Here is my solution.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;longest_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;))):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Obviously, my solution is not good. My function does not work when input is a empty list. The return of my function is a list instead of a string. It would be better if modify my solution like this way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;longest_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;))):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Better solutions&lt;/h3&gt;
&lt;p&gt;After the interview, I searched this problem and tried to find some better solutions. I want to code like a &lt;a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"&gt;&lt;em&gt;pythonista&lt;/em&gt;&lt;/a&gt;. Here are &lt;a href="http://stackoverflow.com/questions/6718196/python-determine-prefix-from-a-set-of-similar-strings"&gt;some good solutions&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;commonprefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Return the longest prefix of all list elements.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some guy even found a way to solve this problem using only one line python code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;abcde&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;abxyz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;takewhile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;izip&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;takewhile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;izip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;ab&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Python"></category></entry><entry><title>Lineage Interview Problem</title><link href="http://yumminhuang.github.io/lineage-interview-problem.html" rel="alternate"></link><updated>2014-11-08T23:20:00-05:00</updated><author><name>Yumminhuang</name></author><id>tag:yumminhuang.github.io,2014-11-05:lineage-interview-problem.html</id><summary type="html">&lt;h3&gt;Problem Description&lt;/h3&gt;
&lt;p&gt;You task is to determine, given a JSON dataset, how many grandparents have exactely two grandchildren.&lt;/p&gt;
&lt;p&gt;The JSON data is represenative of a family tree. Each node in the data represents a person. A person in our dataset has a unique id, a name, a spouse, and a list of children.&lt;/p&gt;
&lt;p&gt;Inspect the file &lt;a href="https://drive.google.com/file/d/0B3Oj9xXsqBUQV2hYdW1Jek1jMms/view?usp=sharing"&gt;tree.json&lt;/a&gt;. It contains a list of objects like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{&amp;quot;_id&amp;quot;:0,&amp;quot;_name&amp;quot;:&amp;quot;Rusty Roop&amp;quot;,&amp;quot;_spouseId&amp;quot;:1,&amp;quot;_childrenIds&amp;quot;:[2,3]}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Solutions&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;To be continued&lt;/em&gt;&lt;/p&gt;</summary></entry><entry><title>在 AWS Auto Scaling Group 中替换 Instance</title><link href="http://yumminhuang.github.io/zai-aws-auto-scaling-group-zhong-ti-huan-instance.html" rel="alternate"></link><updated>2014-08-02T19:39:00-04:00</updated><author><name>Yumminhuang</name></author><id>tag:yumminhuang.github.io,2014-08-02:zai-aws-auto-scaling-group-zhong-ti-huan-instance.html</id><summary type="html">&lt;p&gt; 这两周，我被分配的任务是实现 &lt;a href="http://aws.amazon.com/"&gt;AWS&lt;/a&gt; 的 &lt;a href="http://aws.amazon.com/autoscaling/"&gt;Auto Scaling&lt;/a&gt; 功能。多亏有了 &lt;a href="https://github.com/boto/boto"&gt;Boto&lt;/a&gt;， 很快就实现了创建 Auto Scaling Group 和添加 Scaling Policy。但是有一个问题却花费了一些时间才顺利解决。&lt;/p&gt;
&lt;p&gt; 我们的团队每周四发布新的代码。为了确保服务不中断，更新代码的步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 创建并配置（下载新发布的代码）多个新的 Instance；&lt;/li&gt;
&lt;li&gt; 依次关闭旧的 Instance，每关闭一个 Instance，就激活（运行代码）一个新的 Instance 来替代被关闭的 Instance。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 这样可以保证在 AWS 上运行的 Instance 依次得到更新，并且服务没有中断。&lt;/p&gt;
&lt;p&gt; 现在的问题是：使用了 Auto Scaling 之后，每次尝试改变 Auto Scaling Group 当中的 Instance 数目，都会激发 Scaling Policy。比如我想关闭一个旧的 Instance，这样 Auto Scaling Group 当中 Instance 的数量就会小于 Desired Capacity，Auto Scaling Group 就会新创建一个 Instance， 而不是等我激活一个 Instance 去替代。&lt;/p&gt;
&lt;p&gt; 我想到的办法步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 将 Auto Scaling Group 挂起（避免激发 Scaling Policy）；&lt;/li&gt;
&lt;li&gt; 按照以前的方法替换旧的 Instance；&lt;/li&gt;
&lt;li&gt; 将新创建的 Instance 添加到 Auto Scaling Group。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 因为 AWS Auto Scaling 的特性（比如 Auto Scaling Group 被挂起的时候不能够添加 Instance，&lt;code&gt;desired_capacity&lt;/code&gt; 不能小于 &lt;code&gt;min_size&lt;/code&gt;），实现第三步并不容易。具体来说第三步又要分成下面几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 将 Auto Scaling Group 的 &lt;code&gt;desired_capacity&lt;/code&gt; 和 &lt;code&gt;min_size&lt;/code&gt; 分别置为 &lt;code&gt;0&lt;/code&gt;（防止恢复 Auto Scaling Group 的时候自动创建 Instance）；&lt;/li&gt;
&lt;li&gt; 恢复 Auto Scaling Group（结束挂起状态，然后才可以添加 Instance）；&lt;/li&gt;
&lt;li&gt; 添加 Instance 到 Auto Scaling Group 里；&lt;/li&gt;
&lt;li&gt; 恢复 Auto Scaling Group 的 &lt;code&gt;min_size&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 下面提供一份示例代码以供参考：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;boto.ec2.autoscale&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AutoScaleConnection&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;boto.ec2.connection&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EC2Connection&lt;/span&gt;

&lt;span class="n"&gt;AUTO_SCALING_GROUP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test_auto_scaling_group&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;NEW_INSTANCES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;i-4acb0666&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;i-4acbqa9&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;CHECK_INTERVAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;suspend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;as_conn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Suspend auto scaling group&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;as_conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suspend_processes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AUTO_SCALING_GROUP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Suspend Done&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;as_conn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Resume auto scaling group&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;as_conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resume_processes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AUTO_SCALING_GROUP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Resume Done&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_instance_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ec2conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inst_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Get instance by its id&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deactivate_instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inst&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Deactivate instance&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_instances&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;as_conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ec2conn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Delete instances in auto scaling group&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;as_group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;as_conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_all_groups&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;AUTO_SCALING_GROUP&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;instances&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;get_instance_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ec2conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;as_group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;terminated&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*** Terminate Instance &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
            &lt;span class="n"&gt;deactivate_instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# All instances should be terminated&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;inst&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;terminated&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;inst&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHECK_INTERVAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Delete Done&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;attach_instances&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;as_conn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Attach instances into auto scaling group&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;NEW_INSTANCES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;as_group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;as_conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_all_groups&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;AUTO_SCALING_GROUP&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;as_group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;as_conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach_instances&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AUTO_SCALING_GROUP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NEW_INSTANCES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Attach Done&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;There are instances still in the group&amp;quot;&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHECK_INTERVAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_capacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;as_conn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Set desired capacity and minimum size as 0&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;as_group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;as_conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_all_groups&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;AUTO_SCALING_GROUP&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;as_group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;as_group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;desired_capacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;as_group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Set Capacity Done&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resume_capacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;as_conn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Resume minimum size as the original value&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;as_group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;as_conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_all_groups&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;AUTO_SCALING_GROUP&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;as_group&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;min_size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;as_group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Resume Capacity Done&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;as_conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AutoScaleConnection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;ec2conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EC2Connection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Suspend Auto Scaling Group&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;suspend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;as_conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Delete Instances&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;delete_instances&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;as_conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ec2conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Set Capacity&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;set_capacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;as_conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Resume Auto Scaling Group&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;resume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;as_conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Attach Instances&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;attach_instances&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;as_conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Resume Capacity&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;resume_capacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;as_conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><category term="Python"></category><category term="Boto"></category></entry><entry><title>How to remove all .pyc files from a project?</title><link href="http://yumminhuang.github.io/how-to-remove-all-pyc-files-from-a-project.html" rel="alternate"></link><updated>2014-07-31T19:39:00-04:00</updated><author><name>Yumminhuang</name></author><id>tag:yumminhuang.github.io,2014-07-31:how-to-remove-all-pyc-files-from-a-project.html</id><summary type="html">&lt;p&gt;I am a paranoid guy. I like to delete all "useless" files. I want to clean up my project repository today. There are lots of &lt;code&gt;.pyc&lt;/code&gt; files. And I found this command, which is very convenient to batch delete files in a directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;find . -name &lt;span class="s2"&gt;&amp;quot;*.pyc&amp;quot;&lt;/span&gt; -exec rm -rf &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I can also delete all &lt;code&gt;*.class&lt;/code&gt; files for Java project and &lt;code&gt;.o&lt;/code&gt; files for C project in this way.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;find . -name &lt;span class="s2"&gt;&amp;quot;*.class&amp;quot;&lt;/span&gt; -exec rm -rf &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;
find . -name &lt;span class="s2"&gt;&amp;quot;*.o&amp;quot;&lt;/span&gt; -exec rm -rf &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or I can delete all files whose name starts with 'test'.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;find . -name &lt;span class="s2"&gt;&amp;quot;test*&amp;quot;&lt;/span&gt; -exec rm -rf &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/785519/how-do-i-remove-all-pyc-files-from-a-project"&gt;How do I remove all .pyc files from a project?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Linux"></category><category term="Shell"></category></entry><entry><title>5道不错的Python面试题</title><link href="http://yumminhuang.github.io/5dao-bu-cuo-de-pythonmian-shi-ti.html" rel="alternate"></link><updated>2014-07-28T21:20:00-04:00</updated><author><name>Yumminhuang</name></author><id>tag:yumminhuang.github.io,2014-07-28:5dao-bu-cuo-de-pythonmian-shi-ti.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt; 注：本文的原文是 &lt;a href="http://www.toptal.com/python/interview-questions"&gt;5 Great Python Interview Questions&lt;/a&gt;。中文翻译和解释转自 &lt;a href="http://blog.segmentfault.com/yexiaobai/1190000000618513"&gt;5 个很好的 Python 面试题 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt; 问题一：以下的代码的输出将是什么 ? 说出你的答案并解释。&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Parent&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):
    &lt;span class="o"&gt;x&lt;/span&gt; = &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Child1&lt;/span&gt;(&lt;span class="n"&gt;Parent&lt;/span&gt;):
    &lt;span class="nb"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Child2&lt;/span&gt;(&lt;span class="n"&gt;Parent&lt;/span&gt;):
    &lt;span class="nb"&gt;pass&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;Parent&lt;/span&gt;.&lt;span class="o"&gt;x&lt;/span&gt;, &lt;span class="n"&gt;Child1&lt;/span&gt;.&lt;span class="o"&gt;x&lt;/span&gt;, &lt;span class="n"&gt;Child2&lt;/span&gt;.&lt;span class="o"&gt;x&lt;/span&gt;
&lt;span class="n"&gt;Child1&lt;/span&gt;.&lt;span class="o"&gt;x&lt;/span&gt; = &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;Parent&lt;/span&gt;.&lt;span class="o"&gt;x&lt;/span&gt;, &lt;span class="n"&gt;Child1&lt;/span&gt;.&lt;span class="o"&gt;x&lt;/span&gt;, &lt;span class="n"&gt;Child2&lt;/span&gt;.&lt;span class="o"&gt;x&lt;/span&gt;
&lt;span class="n"&gt;Parent&lt;/span&gt;.&lt;span class="o"&gt;x&lt;/span&gt; = &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;Parent&lt;/span&gt;.&lt;span class="o"&gt;x&lt;/span&gt;, &lt;span class="n"&gt;Child1&lt;/span&gt;.&lt;span class="o"&gt;x&lt;/span&gt;, &lt;span class="n"&gt;Child2&lt;/span&gt;.&lt;span class="o"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt; 答案 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 以上代码的输出是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1 1 1
1 2 1
3 2 3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 使你困惑或是惊奇的是关于最后一行的输出是 &lt;code&gt;3 2 3&lt;/code&gt; 而不是 &lt;code&gt;3 2 1&lt;/code&gt;。为什么改变了 &lt;code&gt;Parent.x&lt;/code&gt; 的值还会改变 &lt;code&gt;Child2.x&lt;/code&gt; 的值，但是同时 &lt;code&gt;Child1.x&lt;/code&gt; 值却没有改变？&lt;/p&gt;
&lt;p&gt; 这个答案的关键是，在 Python 中，类变量在内部是作为字典处理的。如果一个变量的名字没有在当前类的字典中发现，将搜索祖先类（比如父类）直到被引用的变量名被找到（如果这个被引用的变量名既没有在自己所在的类又没有在祖先类中找到，会引发一个 &lt;code&gt;AttributeError&lt;/code&gt; 异常 ）。&lt;/p&gt;
&lt;p&gt; 因此，在父类中设置 &lt;code&gt;x = 1&lt;/code&gt; 会使得类变量 X 在引用该类和其任何子类中的值为 1。这就是因为第一个 print 语句的输出是 &lt;code&gt;1 1 1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt; 随后，如果任何它的子类重写了该值（例如，我们执行语句 &lt;code&gt;Child1.x = 2&lt;/code&gt;），然后，该值仅仅在子类中被改变。这就是为什么第二个 print 语句的输出是 &lt;code&gt;1 2 1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt; 最后，如果该值在父类中被改变（例如，我们执行语句 &lt;code&gt;Parent.x = 3&lt;/code&gt;），这个改变会影响到任何未重写该值的子类当中的值（在这个示例中被影响的子类是 Child2）。这就是为什么第三个 print 输出是 &lt;code&gt;3 2 3&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt; 问题二：以下的代码的输出将是什么 ? 说出你的答案并解释？&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def div1(x,y):
    print(&amp;quot;%s/%s = %s&amp;quot; % (x, y, x/y))

def div2(x,y):
    print(&amp;quot;%s//%s = %s&amp;quot; % (x, y, x//y))

div1(5,2)
div1(5.,2)
div2(5,2)
div2(5.,2.)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt; 答案 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 这个答案实际依赖于你使用的是 Python 2 还是 Python 3。&lt;/p&gt;
&lt;p&gt; 在 &lt;strong&gt;Python 3&lt;/strong&gt; 中，期望的输出是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;5/2 = 2.5
5.0/2 = 2.5
5//2 = 2
5.0//2.0 = 2.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 在 &lt;strong&gt;Python 2&lt;/strong&gt; 中，尽管如此，以上代码的输出将是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;5/2 = 2
5.0/2 = 2.5
5//2 = 2
5.0//2.0 = 2.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 默认，如果两个操作数都是整数，Python 2 自动执行整型计算。结果，&lt;code&gt;5/2&lt;/code&gt; 值为 &lt;code&gt;2&lt;/code&gt;，然而 &lt;code&gt;5./2&lt;/code&gt; 值为 &lt;code&gt;2.5&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt; 注意，尽管如此，你可以在 Python 2 中重载这一行为（比如达到你想在 Python 3 中的同样结果），通过添加以下导入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;from __future__ import division&lt;/code&gt;
也需要注意的是 “ 双划线 ”（//）操作符将一直执行整除，而不管操作数的类型，这就是为什么 &lt;code&gt;5.0//2.0&lt;/code&gt; 值为 &lt;code&gt;2.0&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt; 注： 在 Python 3 中，/ 操作符是做浮点除法，而 &lt;code&gt;//&lt;/code&gt; 是做整除（即商没有余数，比如 &lt;code&gt;10 // 3&lt;/code&gt; 其结果就为 &lt;code&gt;3&lt;/code&gt;，余数会被截除掉，而 &lt;code&gt;(-7) // 3&lt;/code&gt; 的结果却是 &lt;code&gt;-3&lt;/code&gt;。这个算法与其它很多编程语言不一样，需要注意，它们的整除运算会向 0 的方向取值。而在 Python 2 中，/ 就是整除，即和 Python 3 中的 // 操作符一样，）&lt;/p&gt;
&lt;h3&gt; 问题三：以下代码将输出什么 ?&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;list = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;]
print list[10:]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt; 答案 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 以上代码将输出 &lt;code&gt;[]&lt;/code&gt;，并且不会导致一个 &lt;code&gt;IndexError&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt; 正如人们所期望的，试图访问一个超过列表索引值的成员将导致 &lt;code&gt;IndexError&lt;/code&gt;（比如访问以上列表的 &lt;code&gt;list[10]&lt;/code&gt;）。尽管如此，试图访问一个列表的以超出列表成员数作为开始索引的切片将不会导致 &lt;code&gt;IndexError&lt;/code&gt;，并且将仅仅返回一个空列表。&lt;/p&gt;
&lt;p&gt; 一个讨厌的小问题是它会导致出现 bug ，并且这个问题是难以追踪的，因为它在运行时不会引发错误。&lt;/p&gt;
&lt;h3&gt; 问题四：以下的代码的输出将是什么 ? 说出你的答案并解释？&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def multipliers():
    return [lambda x : i * x for i in range(4)]

print [m(2) for m in multipliers()]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 你将如何修改 multipliers 的定义来产生期望的结果 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 答案 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 以上代码的输出是 &lt;code&gt;[6, 6, 6, 6]&lt;/code&gt; （而不是 &lt;code&gt;[0, 2, 4, 6]&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt; 这个的原因是 Python 的闭包的后期绑定导致的 &lt;a href="http://en.wikipedia.org/wiki/Late_binding"&gt;late binding&lt;/a&gt;，这意味着在闭包中的变量是在内部函数被调用的时候被查找。所以结果是，当任何 multipliers() 返回的函数被调用，在那时，i 的值是在它被调用时的周围作用域中查找，到那时，无论哪个返回的函数被调用，for 循环都已经完成了，i 最后的值是 3，因此，每个返回的函数 multiplies 的值都是 3。因此一个等于 2 的值被传递进以上代码，它们将返回一个值 6 （比如： 3 x 2）。&lt;/p&gt;
&lt;p&gt;（顺便说下，正如在 &lt;a href="http://docs.python-guide.org/en/latest/writing/gotchas/"&gt;The Hitchhiker’s Guide to Python&lt;/a&gt; 中指出的，这里有一点普遍的误解，是关于 lambda 表达式的一些东西。一个 lambda 表达式创建的函数不是特殊的，和使用一个普通的 def 创建的函数展示的表现是一样的。）&lt;/p&gt;
&lt;p&gt; 这里有两种方法解决这个问题。&lt;/p&gt;
&lt;p&gt; 最普遍的解决方案是创建一个闭包，通过使用默认参数立即绑定它的参数。例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def multipliers():
    return [lambda x, i=i : i * x for i in range(4)]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 另外一个选择是，你可以使用 &lt;code&gt;functools.partial&lt;/code&gt; 函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mul&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multipliers&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt; 问题五：以下的代码的输出将是什么 ? 说出你的答案并解释？&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def extendList(val, list=[]):
    list.append(val)
    return list

list1 = extendList(10)
list2 = extendList(123,[])
list3 = extendList(&amp;#39;a&amp;#39;)

print &amp;quot;list1 = %s&amp;quot; % list1
print &amp;quot;list2 = %s&amp;quot; % list2
print &amp;quot;list3 = %s&amp;quot; % list3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 你将如何修改 &lt;code&gt;extendList&lt;/code&gt; 的定义来产生期望的结果 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 答案 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 以上代码的输出为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;list1 = [10, &amp;#39;a&amp;#39;]
list2 = [123]
list3 = [10, &amp;#39;a&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 许多人会错误的认为 &lt;code&gt;list1&lt;/code&gt; 应该等于 &lt;code&gt;[10]&lt;/code&gt; 以及 &lt;code&gt;list3&lt;/code&gt; 应该等于 &lt;code&gt;['a']&lt;/code&gt;。认为 &lt;code&gt;list&lt;/code&gt; 的参数会在 &lt;code&gt;extendList&lt;/code&gt; 每次被调用的时候会被设置成它的默认值 &lt;code&gt;[]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt; 尽管如此，实际发生的事情是，新的默认列表仅仅只在函数被定义时创建一次。随后当 &lt;code&gt;extendList&lt;/code&gt; 没有被指定的列表参数调用的时候，其使用的是同一个列表。这就是为什么当函数被定义的时候，表达式是用默认参数被计算，而不是它被调用的时候。&lt;/p&gt;
&lt;p&gt; 因此，&lt;code&gt;list1&lt;/code&gt; 和 &lt;code&gt;list3&lt;/code&gt; 是操作的相同的列表。而 &lt;code&gt;list2&lt;/code&gt; 是操作的它创建的独立的列表（通过传递它自己的空列表作为 &lt;code&gt;list&lt;/code&gt; 参数的值）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;extendList&lt;/code&gt; 函数的定义可以做如下修改，但，当没有新的 &lt;code&gt;list&lt;/code&gt; 参数被指定的时候，会总是开始一个新列表，这更加可能是一直期望的行为。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def extendList(val, list=None):
    if list is None:
        list = []
    list.append(val)
    return list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 使用这个改进的实现，输出将是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;list1 = [10]
list2 = [123]
list3 = [&amp;#39;a&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Python"></category></entry><entry><title>Objective-C语法总结</title><link href="http://yumminhuang.github.io/objective-cyu-fa-zong-jie.html" rel="alternate"></link><updated>2014-05-04T18:15:00-04:00</updated><author><name>Yumminhuang</name></author><id>tag:yumminhuang.github.io,2014-05-04:objective-cyu-fa-zong-jie.html</id><summary type="html">&lt;p&gt; 最近在学习 Objective-C。产生学习 Objective-C 的想法已经很久了，但是以前每次看到 Objective-C 代码就会觉得语法非常奇怪，于是学习的动力就受到的打击。恰逢放假，可以平心静气地学习 Objective-C。&lt;/p&gt;
&lt;p&gt; 在看过了 Objective-C 的基本语法之后，明白了为什么之前会觉得 Objective-C 的语法奇怪。绝大部分的面向对象的程序语言，包括 C++、Java、Python 等在调用方法的格式都是 &lt;code&gt;object.method(argument1, argument2...)&lt;/code&gt;。然而 Objective-C 的格式却是 &lt;code&gt;[object method: argument1 andArg: argument2...]&lt;/code&gt;。所以长期使用 C++, Java 的程序员在第一次看到 Objective-C 代码时，对这些语法肯定有一些不适应。但是适应这些语法并仔细研究之后感觉 Objective-C 的语法也有它的优点。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt; 废话不多说，上干货。下面以 Java 作比对，总结一下 Objective-C 的语法。&lt;/p&gt;
&lt;h3&gt;1. 基本语法 &lt;/h3&gt;
&lt;h4&gt;1.1 创建对象 &lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Java:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;obj = new MyClass();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Objective-C:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="bp"&gt;MyClass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;1.2 调用方法 &lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Java:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;obj.method1() // 没有参数
obj.method2(arg1) // 一个参数
obj.method3(arg1,arg2) // 多个参数
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Objective-C:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="n"&gt;method1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// 没有参数 &lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="nl"&gt;method2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// 一个参数 &lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="nl"&gt;method3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;arg2&lt;/span&gt; &lt;span class="nl"&gt;andArg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// 多个参数 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2. 类的定义 &lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Java:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;public class MyClass extend SuperClass {

    private int attr1;

    public void method1() {
        ...
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Objective-C:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Objectove-C 定义一个类时需要两个文件，分别是负责声明的 Header File 和负责具体实现的 Implementation File。&lt;/p&gt;
&lt;p&gt;MyClass.h&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="bp"&gt;MyClass&lt;/span&gt; : &lt;span class="nc"&gt;SuperClass&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;attr1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;method1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;method2:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;method3:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="nl"&gt;andArg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;classMethod&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 相当于 Java 中的 static 方法 &lt;/span&gt;
&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;MyClass.m&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#import&amp;quot;MyClass.h&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;@implementation&lt;/span&gt; &lt;span class="bp"&gt;MyClass&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;method1&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 此外，Objective-C 还有一个非常方便的 “ 语法糖 ”——&lt;code&gt;@property&lt;/code&gt; 和 &lt;code&gt;@synthesize&lt;/code&gt; 两个关键字。使用这两个关键字之后可以让编译好器自动编写一个与数据成员同名的方法声明从而省去读写方法的声明。
在头文件中加上 &lt;code&gt;@property int attr1;&lt;/code&gt; 就等同于声明了两个方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nt"&gt;attr1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nt"&gt;setAttr1&lt;/span&gt;&lt;span class="o"&gt;:(&lt;/span&gt;&lt;span class="nt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nt"&gt;newAttr1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 实现文件里加上 &lt;code&gt;@synthesize attr1;&lt;/code&gt; 就等同于定义了两个方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;- (int)attr1
{
    return attr1;
}
-(void)setAttr1:(int)newAttr1
{
    attr1 = newAttr1;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. 协议（接口）的定义 &lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Java:&lt;/strong&gt;
定义接口 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;public interface MyInterface {
    public void aInterfaceMethod();
    public void anotherInterfaceMethod();
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 实现接口 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;public class MyClass extend SuperClass implements MyInterface {
    // method declarations
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Objective-C:&lt;/strong&gt;
在 Objective-C 中，用关键字 &lt;code&gt;@protocol&lt;/code&gt; 定义协议，也就是 Java 中的接口。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;@protocol&lt;/span&gt; &lt;span class="nc"&gt;MyProtocol&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;aProtocolMethod&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;anotherProcotolMethod&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 当一个类需要实现协议时，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#import &amp;quot;MyProtocol.h&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="bp"&gt;MyClass&lt;/span&gt; : &lt;span class="nc"&gt;SuperClass&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;MyProtocol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AnotherProtocol&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// method declarations&lt;/span&gt;
&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt; 由于我也是初学 Objective-C，难免有错误和总结不全面的地方，恳请指正。&lt;/p&gt;</summary><category term="Objective-C"></category></entry><entry><title>Execute a Command in the Background on Remote Server using SSH</title><link href="http://yumminhuang.github.io/execute-a-command-in-the-background-on-remote-server-using-ssh.html" rel="alternate"></link><updated>2014-05-04T09:20:00-04:00</updated><author><name>Yumminhuang</name></author><id>tag:yumminhuang.github.io,2014-05-04:execute-a-command-in-the-background-on-remote-server-using-ssh.html</id><summary type="html">&lt;p&gt;In a project, I have to deploy a server program on several remote servers. So I wrote a shell script to deploy and run the program using &lt;code&gt;scp&lt;/code&gt; and &lt;code&gt;ssh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since there are several remote servers, I have to run the server program in the background on all remote machines.&lt;/p&gt;
&lt;p&gt;At first, I simply add the ampersand (&amp;amp;) at the end of the command like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh user@host &lt;span class="s2"&gt;&amp;quot;cd /some/directory; ./program &amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But my script just hangs after it runs first remote server. After googling this program, I found this command to solve my problem.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh -n -f user@host &lt;span class="s2"&gt;&amp;quot;sh -c &amp;#39;cd /some/directory; nohup ./program &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;#39;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command is quiet complicated. It need to use nohup as well as output redirection. But it works and solved my problem.&lt;/p&gt;
&lt;h3&gt;Reference&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/29142/getting-ssh-to-execute-a-command-in-the-background-on-target-machine"&gt;Stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Nohup"&gt;nohup&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Linux"></category><category term="Shell"></category></entry></feed>