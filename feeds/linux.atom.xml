<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>/dev/null</title><link href="http://yumminhuang.github.io/" rel="alternate"></link><link href="http://yumminhuang.github.io/feeds/linux.atom.xml" rel="self"></link><id>http://yumminhuang.github.io/</id><updated>2015-03-31T20:49:00-04:00</updated><entry><title>i3窗口管理器简介</title><link href="http://yumminhuang.github.io/i3chuang-kou-guan-li-qi-jian-jie.html" rel="alternate"></link><updated>2015-03-31T20:49:00-04:00</updated><author><name>Yumminhuang</name></author><id>tag:yumminhuang.github.io,2015-03-29:i3chuang-kou-guan-li-qi-jian-jie.html</id><summary type="html">&lt;p&gt; 在 &lt;a href="http://kernelpanic.fm"&gt; 内核恐慌 &lt;/a&gt; 第九期 &lt;a href="http://ipn.li/kernelpanic/9/"&gt;「程序员的理想工作环境」&lt;/a&gt; 中，主持人 Rio 和吴涛谈及了 Tiling Window Manager，并且介绍了 &lt;a href="http://awesome.naquadah.org/"&gt;Awesome 窗口管理器 &lt;/a&gt; 和 i3 窗口管理器。节目中两位主持人的描述恰好符合我的需求，并且实习所用的笔记本操作系统恰好是 Ubuntu，所以听完节目后，我也试着在办公电脑上安装了 Awesome。然而体验并不愉快，我为此在微博上 &lt;a href="http://www.weibo.com/2622511625/C1N9FgPr5"&gt; 吐槽 &lt;/a&gt;。之后在 Rio 的建议下，我安装了 i3，果然非常好用。这里，结合我两个月的使用体验，简单地介绍一下 i3 窗口管理器，并且推荐大家使用。&lt;/p&gt;
&lt;h2&gt; 平铺式窗口管理器 &lt;/h2&gt;
&lt;p&gt; 窗口管理器（Window manager）是在图形用户界面的视窗系统中，用来控制窗口位置与外观的系统软件。&lt;/p&gt;
&lt;p&gt; 窗口管理器主要有两种 &lt;sup id="fnref:type"&gt;&lt;a class="footnote-ref" href="#fn:type" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 堆叠式窗口管理器（Stacking Window Manager）；&lt;/li&gt;
&lt;li&gt; 平铺式窗口管理器（Tiling Window Manager）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 在 &lt;a href="http://en.wikipedia.org/wiki/Stacking_window_manager"&gt; 堆叠式管理器 &lt;/a&gt;（也称作悬浮式窗口管理器，Floating Window Manager）中，不同窗口可以像桌子上随意摆放的白纸一样相互重叠。常见的窗口管理器多为堆叠式，如 Windows 的 Explorer，Mac OS X 的 Finder，以及 Ubuntu 的 Unity 等等。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Tiling_window_manager"&gt; 平铺式 &lt;/a&gt;（或直译为瓦片式）窗口管理器，其中的窗口不能够重叠，而是像瓦片一样挨个摆放。常用的平铺式管理器有 Awesome 和 i3。&lt;/p&gt;
&lt;p&gt; 根据我个人的使用体验，平铺式窗口管理器（主要指的是 i3）有以下几个优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 简单轻巧；&lt;/li&gt;
&lt;li&gt; 多依赖键盘操作，较少使用鼠标；&lt;/li&gt;
&lt;li&gt; 高度可定制化；&lt;/li&gt;
&lt;li&gt; 稳定。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 具体来说。平铺式窗口管理器没有绚丽的界面和复杂的功能，可以让人更加专注于正在做的事情。同时，平铺式管理器非常精简，如 i3 的安装包只有 900 多 KB，相应地，消耗的资源也更少。平铺式管理器多依赖键盘操作，较少使用鼠标，配合应用程序的快捷键，基本上可以避免鼠标操作，从而提升工作效率。平铺式管理器不仅可以实现边框颜色之类的常规设置，还可以根据用户的需求，修改桌面、窗口等。最后，因为平铺式管理器非常精简，较之堆叠式管理器也更加稳定。至少在我使用的两个月里还没有出现过崩溃的情况。&lt;/p&gt;
&lt;p&gt; 我觉得在工作环境中需要同时打开多个窗口，又拥有多台显示器的时候，就像下图中那样，平铺式窗口管理器最能发挥作用。
&lt;img alt="i3 配合多屏幕 " src="http://awesome.naquadah.org/images/6mon.small.png" /&gt;&lt;/p&gt;
&lt;p&gt; 比如我工作时有一台 13 寸的笔记本和一台 27 寸的外接显示器。时刻保持打开的窗口包括公司内交流用的即时聊天软件，邮件客户端，编辑器，浏览器和多个终端窗口。使用 i3 之后，我的两个显示器基本是这样分配的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 笔记本显示器左右分割为两栏，分别显示聊天软件和邮件客户端；&lt;/li&gt;
&lt;li&gt; 外接显示器分为两栏；&lt;/li&gt;
&lt;li&gt; 第一栏又分两列，分别给编辑器和调试、运行用的终端；&lt;/li&gt;
&lt;li&gt; 第二栏也分两列，分别给浏览器和其它用的终端（常用的是远程登录、监控系统）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 虽然需要同时打开了很多软件，但是因为窗口是平铺的，每次要切换软件时，只需要将屏幕的焦点切换到相应的窗口即可，而不需要像堆叠式管理器那样在凌乱的桌面上找到要用的窗口。&lt;/p&gt;
&lt;h2&gt;i3 窗口管理器的基本操作 &lt;/h2&gt;
&lt;h3&gt; 按键 &lt;/h3&gt;
&lt;p&gt;i3 窗口管理器操作中非常不同的是需要设置一个 &lt;code&gt;MOD&lt;/code&gt; 键，用来执行指令。
我用的是一般 PC 键盘上没什么用的 Windows 键 (Mod4)。为此，我特意把 &lt;a href="http://instagram.com/p/0N9WKCBDZt/"&gt; 办公室的键盘 &lt;/a&gt; 的 Windows 键换成了醒目的红色。&lt;/p&gt;
&lt;p&gt; 具体按键对应的指令参见下面两幅图：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i3wm.org/docs/keyboard-layer1.png" width="600"/&gt;&lt;/p&gt;
&lt;p&gt; 按下 &lt;code&gt;MOD&lt;/code&gt; 键时对应的指令 &lt;/p&gt;
&lt;p&gt;&lt;img src="http://i3wm.org/docs/keyboard-layer2.png" width="600"/&gt;&lt;/p&gt;
&lt;p&gt; 按下 &lt;code&gt;MOD+Shift&lt;/code&gt; 键时对应的指令 &lt;/p&gt;
&lt;h3&gt; 容器 &lt;/h3&gt;
&lt;p&gt;i3 窗口管理器有一个很重要的概念就是容器（Container）。每个容器内可以存放一个应用程序的窗口。一个桌面（或者说 Workspace）就是一个容器。容器可以嵌套形成树型的结构，所以我们可以将容器水平或者垂直地分割成多个容器，从而充分利用桌面的空间。详细解释请参阅 &lt;a href="http://i3wm.org/docs/userguide.html#_tree"&gt; 文档 &lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt; 常用的指令 &lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MOD + H, J, K, L&lt;/code&gt;：移动屏幕焦点；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MOD + Shift + H, J, K, L&lt;/code&gt;：移动容器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MOD + V&lt;/code&gt;：垂直分割容器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MOD + H&lt;/code&gt;：水平分割容器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MOD + D&lt;/code&gt;：打开应用程序启动器 Dmenu；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MOD + Enter&lt;/code&gt;：打开终端。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;i3 窗口管理器的安装和配置 &lt;/h2&gt;
&lt;h3&gt; 安装 &lt;/h3&gt;
&lt;p&gt; 以 Ubuntu 为例。首先添加 i3 到源列表。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;deb http://debian.sur5r.net/i3/ &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;lsb_release -c -s&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; universe&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/apt/sources.list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 然后运行以下指令进行安装。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;apt-get update
apt-get --allow-unauthenticated install sur5r-keyring
apt-get install i3
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt; 配置 &lt;/h3&gt;
&lt;p&gt; 我之所以放弃 Awesome 的一个很重要的原因就是它的配置过于复杂。诚然，Awesome 的效果要比 i3 酷炫很多，但是设置需要用到 Lua 脚本。很多功能还需要通过安装插件来完成。相反，i3 只需要两个设置文件，而且用的是非常易读的语法。&lt;/p&gt;
&lt;p&gt; 配置文件包括两部分，&lt;code&gt;~/.config/i3/config&lt;/code&gt; 和 &lt;code&gt;~/.config/i3status/config&lt;/code&gt;，分别用来设置 i3 窗口管理器和状态栏 &lt;sup id="fnref:config"&gt;&lt;a class="footnote-ref" href="#fn:config" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt; 在这里贴一下我自己的 &lt;a href="https://github.com/yumminhuang/dotfiles/blob/master/files/i3_config"&gt;i3 配置文件 &lt;/a&gt; 和 &lt;a href="https://github.com/yumminhuang/dotfiles/blob/master/files/i3status_config"&gt;i3 状态栏的配置文件 &lt;/a&gt;，基本上每条设置都做了注释，以供读者参考。&lt;/p&gt;
&lt;p&gt; 想要了解更加具体的配置方法，可以参阅 i3 的 &lt;a href="http://i3wm.org/docs/"&gt; 官方文档 &lt;/a&gt;。&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:type"&gt;
&lt;p&gt; 事实上，一些窗口管理器，如 Awesome 和 i3，支持堆叠式和平铺式两种窗口管理器的形式。这样的窗口管理器被称作 &lt;a href="http://en.wikipedia.org/wiki/Dynamic_window_manager"&gt;「动态式窗口管理器」&lt;/a&gt;。因为本文主要介绍 i3 作为平铺的特性，故将其划为平铺式窗口管理器。&amp;#160;&lt;a class="footnote-backref" href="#fnref:type" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:config"&gt;
&lt;p&gt; 为了方便编辑，我把配置文件放在 &lt;code&gt;~&lt;/code&gt; 目录下，也可以放在其它目录下面。配置文件路径具体的读取顺序请参阅 &lt;a href="http://i3wm.org/docs/userguide.html#configuring"&gt; 关于 i3 设置的文档 &lt;/a&gt; 和 &lt;a href="http://i3wm.org/i3status/manpage.html#_options"&gt; 关于状态栏设置的文档 &lt;/a&gt;。&amp;#160;&lt;a class="footnote-backref" href="#fnref:config" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Linux"></category></entry><entry><title>How to remove all .pyc files from a project?</title><link href="http://yumminhuang.github.io/how-to-remove-all-pyc-files-from-a-project.html" rel="alternate"></link><updated>2014-07-31T19:39:00-04:00</updated><author><name>Yumminhuang</name></author><id>tag:yumminhuang.github.io,2014-07-31:how-to-remove-all-pyc-files-from-a-project.html</id><summary type="html">&lt;p&gt;I am a paranoid guy. I like to delete all "useless" files. I want to clean up my project repository today. There are lots of &lt;code&gt;.pyc&lt;/code&gt; files. And I found this command, which is very convenient to batch delete files in a directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;find . -name &lt;span class="s2"&gt;&amp;quot;*.pyc&amp;quot;&lt;/span&gt; -exec rm -rf &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I can also delete all &lt;code&gt;*.class&lt;/code&gt; files for Java project and &lt;code&gt;.o&lt;/code&gt; files for C project in this way.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;find . -name &lt;span class="s2"&gt;&amp;quot;*.class&amp;quot;&lt;/span&gt; -exec rm -rf &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;
find . -name &lt;span class="s2"&gt;&amp;quot;*.o&amp;quot;&lt;/span&gt; -exec rm -rf &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or I can delete all files whose name starts with 'test'.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;find . -name &lt;span class="s2"&gt;&amp;quot;test*&amp;quot;&lt;/span&gt; -exec rm -rf &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/785519/how-do-i-remove-all-pyc-files-from-a-project"&gt;How do I remove all .pyc files from a project?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Linux"></category><category term="Shell"></category></entry><entry><title>Execute a Command in the Background on Remote Server using SSH</title><link href="http://yumminhuang.github.io/execute-a-command-in-the-background-on-remote-server-using-ssh.html" rel="alternate"></link><updated>2014-05-04T09:20:00-04:00</updated><author><name>Yumminhuang</name></author><id>tag:yumminhuang.github.io,2014-05-04:execute-a-command-in-the-background-on-remote-server-using-ssh.html</id><summary type="html">&lt;p&gt;In a project, I have to deploy a server program on several remote servers. So I wrote a shell script to deploy and run the program using &lt;code&gt;scp&lt;/code&gt; and &lt;code&gt;ssh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since there are several remote servers, I have to run the server program in the background on all remote machines.&lt;/p&gt;
&lt;p&gt;At first, I simply add the ampersand (&amp;amp;) at the end of the command like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh user@host &lt;span class="s2"&gt;&amp;quot;cd /some/directory; ./program &amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But my script just hangs after it runs first remote server. After googling this program, I found this command to solve my problem.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh -n -f user@host &lt;span class="s2"&gt;&amp;quot;sh -c &amp;#39;cd /some/directory; nohup ./program &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;#39;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command is quiet complicated. It need to use nohup as well as output redirection. But it works and solved my problem.&lt;/p&gt;
&lt;h3&gt;Reference&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/29142/getting-ssh-to-execute-a-command-in-the-background-on-target-machine"&gt;Stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Nohup"&gt;nohup&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Linux"></category><category term="Shell"></category></entry></feed>