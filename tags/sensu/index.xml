<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sensu on 临水轩志</title>
    <link>https://yumminhuang.github.io/tags/sensu/index.xml</link>
    <description>Recent content in Sensu on 临水轩志</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>2016 ~ Yaming Huang</copyright>
    <atom:link href="/tags/sensu/index.xml" rel="self" type="application/rss+xml" />
    
      
        
          <item>
            <title>Sensu 简介</title>
            <link>https://yumminhuang.github.io/post/Sensu/</link>
            <pubDate>Sat, 04 Apr 2015 00:00:00 +0000</pubDate>
            
            <guid>https://yumminhuang.github.io/post/Sensu/</guid>
            <description>&lt;h2 id=&#34;sensu-简介&#34;&gt;Sensu 简介&lt;/h2&gt;

&lt;p&gt;Sensu 是一款开源的监控框架。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sensuapp.org/docs/0.16/img/sensu-diagram-87a902f0.gif&#34; alt=&#34;Sensu components&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Sensu 采用 C/S 结构，有用来发送指令、存储数据的 Sensu Server 和被监控的对象 Sensu Client。Sensu Server 和 Sensu Client 之间使用 RabbitMQ 进行通信，Server 端使用 Redis 存储数据。每一个 Sensu Client 使用 JSON 进行设置。例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;client&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;i-424242&amp;quot;,
    &amp;quot;address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
    &amp;quot;subscriptions&amp;quot;: [
      &amp;quot;production&amp;quot;,
      &amp;quot;webserver&amp;quot;
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中，&lt;code&gt;subscriptions&lt;/code&gt; 指定了 Sensu Client 订阅哪些监控项目。 Sensu 采用了&lt;a href=&#34;http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern&#34;&gt;订阅者模式&lt;/a&gt;，相应地，定义监控项目的时候则需要指定 &lt;code&gt;subscribers&lt;/code&gt;（后文中将会提及）。&lt;/p&gt;

&lt;h3 id=&#34;sensu-的优势&#34;&gt;Sensu 的优势&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;纯 Ruby 实现，核心代码不超过 1000 行；&lt;/li&gt;
&lt;li&gt;配置简单，配置文件使用 JSON；&lt;/li&gt;
&lt;li&gt;结构简单，易扩展，很容易就能够上手编写插件；&lt;/li&gt;
&lt;li&gt;丰富的社区支持，&lt;a href=&#34;https://github.com/sensu/sensu-community-plugins&#34;&gt;Sensu Community Plugin&lt;/a&gt; 几乎包含了所有常用的监控项目。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;sensu-的结构&#34;&gt;Sensu 的结构&lt;/h3&gt;

&lt;p&gt;简单来说，Sensu 分为 Check 和 Handler 两个部分。Sensu 经常被描述为「monitoring router」，因为它不仅可以用 Check 监控系统，还可以设置 Handler 根据当前的条件采取相应的行动。&lt;/p&gt;

&lt;h4 id=&#34;sensu-check&#34;&gt;Sensu Check&lt;/h4&gt;

&lt;p&gt;Sensu Check 用来监控服务和资源。Check 由 Sensu Server 发出执行指令后在 Sensu Client 上运行。本质上，Sensu Check 是一个命令或者脚本，用来把数据输出到 &lt;code&gt;STDOUT&lt;/code&gt; 或者 &lt;code&gt;STDERR&lt;/code&gt;；同时，用返回值（exit status code）来指示状态：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;： OK&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;：WARNING&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2&lt;/code&gt;：CRITICAL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;3&lt;/code&gt;：UNKNOWN or CUSTOM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此，只要定义好返回值和输出，很容易就可以写出一个 Sensu Check。下面就是一个用来监测 &lt;code&gt;chef-client&lt;/code&gt; 进程是否在运行的 Ruby 脚本。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;procs = `ps aux`
  running = false
  procs.each_line do |proc|
    running = true if proc.include?(&#39;chef-client&#39;)
  end
  if running
    puts &#39;OK - Chef client daemon is running&#39;
    exit 0
  else
    puts &#39;WARNING - Chef client daemon is NOT running&#39;
    exit 1
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;写好一个Check的脚本，需要在配置文件中添加它。比如下面,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;checks&amp;quot;: {
    &amp;quot;chef_client&amp;quot;: {
      &amp;quot;command&amp;quot;: &amp;quot;check-chef-client.rb&amp;quot;,
      &amp;quot;subscribers&amp;quot;: [
        &amp;quot;production&amp;quot;
      ],
      &amp;quot;interval&amp;quot;: 60,
      &amp;quot;handlers&amp;quot;: [
        &amp;quot;pagerduty&amp;quot;,
        &amp;quot;mail&amp;quot;
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;subscribers&lt;/code&gt; 用来指定订阅者。&lt;code&gt;interval&lt;/code&gt; 定义检查的周期为 &lt;code&gt;60s&lt;/code&gt;，&lt;code&gt;handlers&lt;/code&gt; 则告诉 Sensu 当此 Check 出现异常时使用 &lt;code&gt;pagerduty&lt;/code&gt; 和 &lt;code&gt;mail&lt;/code&gt; 这两个 Handler。&lt;/p&gt;

&lt;h4 id=&#34;sensu-handler&#34;&gt;Sensu Handler&lt;/h4&gt;

&lt;p&gt;Sensu Handler 用来处理 Sensu Check 产生的 Event，例如发送邮件通知，将采集的数据发送到 &lt;a href=&#34;http://graphite.wikidot.com&#34;&gt;Graphite&lt;/a&gt;，等等。 Handler 有不同的类型，有常用的 &lt;code&gt;Pipe&lt;/code&gt;，可以将 Event 传入到 &lt;code&gt;STDIN&lt;/code&gt;（可以理解为 &lt;code&gt;cat event.json | handler&lt;/code&gt;）；有 TCP/UDP，将 Event 传入到 Socket 发送。&lt;/p&gt;

&lt;p&gt;下面是一个简单的 Sensu Handler 定义，用来将 Event 的内容发送到指定的邮箱地址。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;handlers&amp;quot;: {
    &amp;quot;mail&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;pipe&amp;quot;,
      &amp;quot;command&amp;quot;: &amp;quot;mailx -s &#39;sensu event&#39; email@address.com&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;基于-sensu-的安全更新监控工具&#34;&gt;基于 Sensu 的安全更新监控工具&lt;/h2&gt;

&lt;p&gt;接下来，结合我这次实习里的一个项目来详细地介绍一下 Sensu 的使用。&lt;/p&gt;

&lt;h3 id=&#34;需求&#34;&gt;需求&lt;/h3&gt;

&lt;p&gt;我们公司在 AWS 上有大约350个实例&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:Instance&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:Instance&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，运行的是 Ubuntu 操作系统。服务器上的软件会不定期收到更新，包括非常重要的安全更新。我们希望及时知道服务器上有哪些安全更新可以安装，最好可以通过邮件的方式通知。通知里应当至少包括如下信息：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;更新的软件包名称；&lt;/li&gt;
&lt;li&gt;软件包当前的版本；&lt;/li&gt;
&lt;li&gt;可供安装的版本。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;此外，一个邮件里包含 350 台机器的信息显然不方便阅读。恰好公司的 350 台服务器根据功能分为若干个 &lt;code&gt;subnet&lt;/code&gt;，如 dev，tst，stg 等。所以，最好可以为每一个 subnet 生成一份安全更新的报告。&lt;/p&gt;

&lt;h3 id=&#34;实现&#34;&gt;实现&lt;/h3&gt;

&lt;h4 id=&#34;安全更新的信息收集&#34;&gt;安全更新的信息收集&lt;/h4&gt;

&lt;p&gt;使用 Debian/Ubuntu 的用户都知道，每次登陆都会看到类似的信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;17 packages can be updated.
6 updates are security updates.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以此为源头，我找到了 Debian 系统内自带的一个 Python 脚本 &lt;code&gt;/usr/lib/update-notifier/apt_check.py&lt;/code&gt;。它可以调用 &lt;a href=&#34;https://apt.alioth.debian.org/python-apt-doc/index.html&#34;&gt;python-apt&lt;/a&gt; 库收集系统当前可以安装的安全更新。以此脚本为基础稍加改动就可以得到我们所需要的信息。&lt;/p&gt;

&lt;p&gt;我已经把修改过的脚本做成了一个 &lt;a href=&#34;https://github.com/sensu/sensu-community-plugins/blob/master/plugins/system/package-updates-metric.py&#34;&gt;Sensu Plugin&lt;/a&gt; 提交到了 Sensu 社区。&lt;/p&gt;

&lt;p&gt;####信息的汇集和通知
第一步非常顺利，但是还有问题需要解决：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Python 脚本只能收集本地的信息，如何把350台服务器的信息汇集在一起？&lt;/li&gt;
&lt;li&gt;信息汇集完了如何进行分类、通知？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;为了解决这两个问题，就需要用到本文的主角 Sensu  了。&lt;/p&gt;

&lt;p&gt;第一个问题是汇集多台机器的检查结果。事实上，通常的Sensu Check 也只能检查一台机器。为了解决第一个问题，我使用了 &lt;a href=&#34;http://sensuapp.org/docs/0.16/api_aggregates&#34;&gt;Sensu Aggregate API&lt;/a&gt;。我们可以把一个 Sensu Check 定义成 &lt;a href=&#34;http://sensuapp.org/docs/0.16/checks&#34;&gt;Aggregate Check&lt;/a&gt;，然后通过 API 可以得到所有该 Check 的结果。&lt;/p&gt;

&lt;p&gt;因此，整个安全更新监控工具使用了两个 Sensu Check。第一个 Aggregate Check 运行在所有的服务器上，用来收集本地的安全更新。第二个 Check 运行在一台服务器上，它会调用 Aggregate API 读取第一个 Check 的结果，再加以归类、分析。如果有安全更新可以安装，就触发 Handler 发送通知邮件。&lt;/p&gt;

&lt;p&gt;第一个 Check 的定义：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;checks&amp;quot;: {
    &amp;quot;apt-check&amp;quot;: {
      &amp;quot;command&amp;quot;: &amp;quot;package-updates-metric.py&amp;quot;,
      &amp;quot;subscribers&amp;quot;: [
        &amp;quot;production&amp;quot;
      ],
      &amp;quot;interval&amp;quot;: 28800,
      &amp;quot;aggregate&amp;quot;: true,
      &amp;quot;handler&amp;quot;: false
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第二个Check的定义：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;checks&amp;quot;: {
    &amp;quot;aggregate_apt_check&amp;quot;: {
      &amp;quot;command&amp;quot;: &amp;quot;package-updates-check.py&amp;quot;,
      &amp;quot;subscribers&amp;quot;: [
        &amp;quot;mg102.ops&amp;quot;
      ],
      &amp;quot;publish&amp;quot;: false,
      &amp;quot;handler&amp;quot;: &amp;quot;package-updates-notify.rb&amp;quot;,
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中，&lt;code&gt;package-updates-check.py&lt;/code&gt; 是另外一个 Python 脚本，主要是访问 API 并且读取结果。如果发现了安全更新就输出结果并返回&lt;code&gt;1&lt;/code&gt;，这样就可以触发 &lt;code&gt;package-updates-notify.rb&lt;/code&gt;。这是一个 Ruby 脚本，用来读取第二个 Check 的结果，再把结果分成不同的 subnet 发送邮件。
另外，这里设置了 &lt;code&gt;&amp;quot;publish&amp;quot;: false&lt;/code&gt;，所以这个 Check 需要手工启动（因为没有必要定时调用，每天一次足矣），可以通过以下命令来手动请求 Sensu Check。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -XPOST http://api.sensu.example.com:4567/check/request -d &#39;{&amp;quot;check&amp;quot;:&amp;quot;aggregate_apt_check&amp;quot;}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我添加了一个 Cron job 每天早上定时调用该命令。这样每天早上一到办公室就可以及时获知所有服务器是否需要更新。&lt;/p&gt;

&lt;p&gt;整个工具就基本完成了。剩下的内容就是写一个 Chef 的 Recipe，把工具部署到所有的服务器上。&lt;/p&gt;

&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;这就是我的第一个 Sensu 项目。学习一门编程语言或一个工具最好的方法就是用它来做一个项目。的确，通过这个项目让我对 Sensu 的功能和特性有了比较清楚的了解。&lt;/p&gt;

&lt;p&gt;整个安全更新监控工具的实现描述得很简单，但是从立项到投入实际应用还是用了我一个月的时间，后期还花费了一些时间在修复 Bug 上。因为很多工具都是初次使用，包括第一次接触 Sensu，第一次使用 Ruby 做项目，第一次使用 Chef，实现的过程中边学边做，还是走了不少弯路。&lt;/p&gt;

&lt;p&gt;本文里只列出大致的框架，有一些代码没有贴出，贴出的代码也非完全准确。但是思路和意思已经都展现清楚了。&lt;/p&gt;

&lt;p&gt;更加详细的内容可以参阅 &lt;a href=&#34;http://sensuapp.org/docs/0.16/overview&#34;&gt;Sensu 文档&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:Instance&#34;&gt;「实例」（Instance）这个说法听上去非常别扭，若无特别说明下文中「服务器」即指 AWS 实例。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:Instance&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
          </item>
        
      
    
  </channel>
</rss>
